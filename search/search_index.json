{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accueil \u00b6 Vous suivez les cours en ligne de l'IMT sur MicroPython et vous cherchez de l'aide ? Vous \u00eates au bon endroit ! Vos outils \u00b6 L'interface Vittascience : D\u00e9buter avec l'interface de d\u00e9veloppement d\u00e9velopp\u00e9e par notre partenaire Vittascience Carte Galaxia : Tout savoir sur la carte \u00e9lectronique d\u00e9velopp\u00e9e par notre partenaire Thingz Guides de r\u00e9f\u00e9rence \u00b6 Vous trouverez dans les cat\u00e9gories suivantes des exemples et des ressources p\u00e9dagogiques consacr\u00e9es au langage MicroPython : Exemples issus du langage Python Exemples sp\u00e9cifiques \u00e0 MicroPython Contr\u00f4le Apparence Op\u00e9rateurs Communication Texte Capteurs Variables Actionneurs Listes Son Fonctions","title":"Accueil"},{"location":"#accueil","text":"Vous suivez les cours en ligne de l'IMT sur MicroPython et vous cherchez de l'aide ? Vous \u00eates au bon endroit !","title":"Accueil"},{"location":"#vos-outils","text":"L'interface Vittascience : D\u00e9buter avec l'interface de d\u00e9veloppement d\u00e9velopp\u00e9e par notre partenaire Vittascience Carte Galaxia : Tout savoir sur la carte \u00e9lectronique d\u00e9velopp\u00e9e par notre partenaire Thingz","title":"Vos outils"},{"location":"#guides-de-reference","text":"Vous trouverez dans les cat\u00e9gories suivantes des exemples et des ressources p\u00e9dagogiques consacr\u00e9es au langage MicroPython : Exemples issus du langage Python Exemples sp\u00e9cifiques \u00e0 MicroPython Contr\u00f4le Apparence Op\u00e9rateurs Communication Texte Capteurs Variables Actionneurs Listes Son Fonctions","title":"Guides de r\u00e9f\u00e9rence"},{"location":"algorithmes/","text":"Les algorithmes \u00b6 Vous avez peut-\u00eatre d\u00e9j\u00e0 entendu le mot \u00ab algorithme \u00bb et c'est bien normal car les algos (contraction du mot algorithme) sont utilis\u00e9s quotiennement dans de nombreux ordinateurs qui nous entourent. Ces ordinateurs fonctionnent un peu comme nous : Nos composants Les composants d'un ordinateur \u00c7a permet de :material-question_mark: Nos yeux Une webcam Voir Nos oreilles Un microphone Entendre Nos doigts Un capteur de temp\u00e9rature Sentir la temp\u00e9rature Ils peuvent percevoir leur environnement gr\u00e2ces \u00e0 des entr\u00e9es Pour fonctionner, un ordinateur a besoin de savoir quoi faire et pour \u00e7a, il vient ex\u00e9cuter des algorithmes! Et oui, derri\u00e8re chaque t\u00e2che r\u00e9alis\u00e9e par l'ordinateur : un algorithme \u00e9crit par une humaine ou un humain ! Finalement, un ordinateur n'est pas si malin. Un algorithme pren","title":"Les algorithmes"},{"location":"algorithmes/#les-algorithmes","text":"Vous avez peut-\u00eatre d\u00e9j\u00e0 entendu le mot \u00ab algorithme \u00bb et c'est bien normal car les algos (contraction du mot algorithme) sont utilis\u00e9s quotiennement dans de nombreux ordinateurs qui nous entourent. Ces ordinateurs fonctionnent un peu comme nous : Nos composants Les composants d'un ordinateur \u00c7a permet de :material-question_mark: Nos yeux Une webcam Voir Nos oreilles Un microphone Entendre Nos doigts Un capteur de temp\u00e9rature Sentir la temp\u00e9rature Ils peuvent percevoir leur environnement gr\u00e2ces \u00e0 des entr\u00e9es Pour fonctionner, un ordinateur a besoin de savoir quoi faire et pour \u00e7a, il vient ex\u00e9cuter des algorithmes! Et oui, derri\u00e8re chaque t\u00e2che r\u00e9alis\u00e9e par l'ordinateur : un algorithme \u00e9crit par une humaine ou un humain ! Finalement, un ordinateur n'est pas si malin. Un algorithme pren","title":"Les algorithmes"},{"location":"galaxia/","text":"La carte Galaxia est une carte \u00e9lectronique d\u00e9velopp\u00e9e par l'entreprise toulousaine Thingz . Cette carte est programmable avec le langage MicroPython et \u00e7a tombe bien puisque c'est ce langage de programmation que vous allez apprendre dans les cours en ligne de l'IMT ! Info Passez votre souris et cliquez sur l'image ci-contre pour en savoir plus sur les composants de la carte Galaxia ! admonition = document.querySelector('.end'); admonition.style.marginRight=\"64px\"; .cls-6:hover{fill:#22b573;}.cls-8:hover{fill:#22b573;}.cls-15:hover{fill:#22b573;}.cls-14:hover{fill:#22b573;}.cls-2:hover{fill:#22b573;}.cls-27:hover{fill:#22b573;}.cls-1{fill:#d1d0c6;}.cls-2,.cls-3{fill:#f8a800;}.cls-2{opacity:0.43;}.cls-3{opacity:0.44;}.cls-10,.cls-15,.cls-16,.cls-22,.cls-24,.cls-27,.cls-29,.cls-30,.cls-4{fill:#000000;}.cls-28,.cls-29,.cls-4{stroke:#000;}.cls-15,.cls-22,.cls-25,.cls-28,.cls-30,.cls-4{stroke-linejoin:round;}.cls-5,.cls-7{stroke:#ffba00;}.cls-10,.cls-11,.cls-12,.cls-13,.cls-16,.cls-17,.cls-21,.cls-23,.cls-24,.cls-27,.cls-29,.cls-5,.cls-7,.cls-8{stroke-miterlimit:10;}.cls-22,.cls-24,.cls-25,.cls-5{stroke-width:2px;}.cls-6{fill:#ffba00;}.cls-17,.cls-21,.cls-23,.cls-26,.cls-7{fill:#fff;}.cls-12,.cls-8{fill:#f2f2f2;}.cls-8{stroke:#ccc;}.cls-17,.cls-27,.cls-8{stroke-width:0.75px;}.cls-9{fill:gray;}.cls-10,.cls-11,.cls-12,.cls-13,.cls-15,.cls-17,.cls-21,.cls-22,.cls-23,.cls-24,.cls-25,.cls-27,.cls-30{stroke:#fff;}.cls-11{fill:#999;}.cls-13{fill:#1536ff;}.cls-14{fill:#ffe63f;}.cls-15,.cls-16,.cls-22,.cls-24,.cls-25,.cls-28{stroke-linecap:round;}.cls-16{stroke:#ff2eb5;}.cls-17{font-size:12.54px;}.cls-17,.cls-21,.cls-23{font-family:GTEestiProDisplay-Regular, GT Eesti Pro Display;}.cls-18{letter-spacing:-0.04em;}.cls-19{letter-spacing:-0.02em;}.cls-20{letter-spacing:-0.02em;}.cls-21{font-size:30.46px;letter-spacing:-0.02em;}.cls-23{font-size:32.25px;}.cls-28{fill:#945c00;}.cls-28,.cls-29{stroke-width:0.5px;} Les composants de la Galaxia \u00b6 Le microcontr\u00f4leur ESP32-S2 (WiFi et Bluetooth) \u00b6 C'est le cerveau de la carte. C'est lui qui va ex\u00e9cuter vos programmes d\u00e9sormais. Sa vitesse de calcul est de 240 MHz, ce qui est tr\u00e8s \u00e9lev\u00e9 pour une si petite carte programmable. C'est \u00e9galement ce module qui permet la communication WiFi : point d'acc\u00e8s pour la maison ou pour la classe, \u00e9changes de messages en r\u00e9seau local avec adressage IP et serveur web. Il a \u00e9galement une quantit\u00e9 de m\u00e9moire importante pour stocker plusieurs dizaines de programmes python en m\u00eame temps et des fichiers audio. L'\u00e9cran LCD \u00b6 Il a une taille de 1,8 pouces en diagonale et dispose d'une r\u00e9solution de 128\u00d7160 pixels et d'un r\u00e9tro\u00e9clairage \u00e0 LED blanche. Il peut afficher une grande vari\u00e9t\u00e9 de couleurs : 262 144 tonalit\u00e9s de couleurs (18 bits). Il permet d'afficher du texte, des donn\u00e9es et des \u00e9l\u00e9ments graphiques. Enfin, il permet de naviguer dans le menu Syst\u00e8me pour acc\u00e9der \u00e0 plusieurs fonctionnalit\u00e9s d\u00e9crites plus bas. Une led RGB \u00b6 Elle int\u00e8gre en fait 3 LEDs (rouge, vert et bleu) dans un seul bo\u00eetier pour vous permettre de composer les couleurs de votre choix. On parle dans ce cas de synth\u00e8se additive des couleurs (\u00e0 la diff\u00e9rence de la peinture o\u00f9 l'on combine les couleurs primaires : cyan, magenta et jaune avec une synth\u00e8se soustractive). Cette LED offre un indicateur lumineux simple \u00e0 programmer pour indiquer diff\u00e9rentes informations en fonction des couleurs choisies. Sa luminosit\u00e9 offre une capacit\u00e9 d'\u00e9clairage qui peut permettre d'\u00e9clairer un objet dans un environnement sombre. Pour chacune des 3 couleurs, on peut r\u00e9gler l'intensit\u00e9 lumineuse avec une valeur comprise entre 0 (absence de luminosit\u00e9) et 255 (luminosit\u00e9 maximale). Un capteur de lumi\u00e8re \u00b6 Il est int\u00e9gr\u00e9 \u00e0 la LED et capte la luminosit\u00e9 qui lui parvient. La captation est tr\u00e8s directionnelle, cela signifie qu'il faut bien pointer la LED dans la direction de la lumi\u00e8re que l'on veut mesurer. Les valeurs obtenues vont de 0 \u00e0 255. En combinaison avec l\u2019\u00e9cran vous pouvez afficher un graphique pr\u00e9sentant l\u2019\u00e9volution de la luminosit\u00e9. Programmez une alarme lorsque qu\u2019un tiroir est ouvert ou ferm\u00e9, programmez une prise connect\u00e9e qui allumera votre lampe lorsque la luminosit\u00e9 baisse, et bien d\u2019autres exp\u00e9riences. La prise jack audio \u00b6 Elle offre une entr\u00e9e et une sortie audio \u00e0 la Galaxia. Vous pouvez y brancher un micro pour exploiter l'entr\u00e9e audio, une enceinte pour exploiter la sortie, ou un kit main libre pour profiter des deux en m\u00eame temps. Le magn\u00e9tom\u00e8tre \u00b6 Ce capteur permet de mesurer un champ magn\u00e9tique dans un espace en 3 dimensions. L'usage qui nous int\u00e9ressera le plus souvent est la d\u00e9tection du nord magn\u00e9tique. Ainsi, vous pourrez programmer votre carte comme une boussole ou trouvez votre orientation par rapport au nord. Deux boutons poussoirs \u00b6 Vous pouvez d\u00e9tecter s'ils ont \u00e9t\u00e9 appuy\u00e9 bri\u00e8vement ou s'ils sont maintenus appuy\u00e9s. G\u00e9n\u00e9ralement, on utilise cette d\u00e9tection d'appui pour d\u00e9clencher des actions en cons\u00e9quence. Quatre boutons tactiles \u00b6 Leur utilisation n'est pas tr\u00e8s diff\u00e9rente de celle des boutons A et B. Ils sont dispos\u00e9s en cercle pour offrir un pad tactile qui peut \u00eatre utilis\u00e9 comme une fl\u00e8che directionnelle, ils donnent ainsi \u00e0 la Galaxia un petit air de console de jeu. Le port micro-USB \u00b6 Il vous sert \u00e0 alimenter votre Galaxia, \u00e0 communiquer/programmer avec l'ordinateur gr\u00e2ce au port s\u00e9rie . Une fois programm\u00e9e, on peut l'utiliser pour brancher une batterie USB et ainsi faire des objets mobiles. Une connectique compatible micro:bit \u00b6 Il vous permet de connecter la carte Galaxia \u00e0 des robots, comme le Maqueen ou d'autres accessoires compatibles micro:bit. Brancher la carte Galaxia \u00e0 un ordinateur \u00b6 Info La section qui suit est destin\u00e9e aux heureux\u00b7euses propri\u00e9taires de notre kit MOOCs MicroPython . L'achat de ce kit est optionnel et toutes les activit\u00e9s de ce MOOC peut \u00eatre simul\u00e9es avec l'interface Vittascience . L'interface Vittascience permet de simuler une carte \u00e9lectronique, des capteurs et des actionneurs. Et \u00e7a c'est chouette ! Mais ce qui est encore mieux, c'est de manipuler tout \u00e7a dans la vraie vie Pour cela, veuillez suivre les \u00e9tapes ci-dessous : Connectez le port micro-usb de votre Galaxia \u00e0 votre ordinateur en utilisant le c\u00e2ble micro-USB vers USB fourni dans le kit. Depuis le navigateur Chrome (ou Edge ou Opera), ouvrez l' interface Vittascience et ouvrez la console en bas de l'interface avec le petit bouton . Cliquez ensuite sur le bouton REPL pour ouvrir la communication entre votre ordinateur et la carte Galaxia. Choissisez enfin le port USB sur lequel est branch\u00e9 votre Galaxia et cliquez sur Connexion D\u00e8s lors, vous pouvez voir les messages envoy\u00e9es depuis votre carte Galaxia (pour en savoir plus sur les messages sur le port s\u00e9rie, c'est par ici Vous pouvez \u00e9galement t\u00e9leverser votre code sur la carte gr\u00e2ce au bouton T\u00e9l\u00e9verser","title":"La carte Galaxia"},{"location":"galaxia/#les-composants-de-la-galaxia","text":"","title":"Les composants de la Galaxia"},{"location":"galaxia/#le-microcontroleur-esp32-s2-wifi-et-bluetooth","text":"C'est le cerveau de la carte. C'est lui qui va ex\u00e9cuter vos programmes d\u00e9sormais. Sa vitesse de calcul est de 240 MHz, ce qui est tr\u00e8s \u00e9lev\u00e9 pour une si petite carte programmable. C'est \u00e9galement ce module qui permet la communication WiFi : point d'acc\u00e8s pour la maison ou pour la classe, \u00e9changes de messages en r\u00e9seau local avec adressage IP et serveur web. Il a \u00e9galement une quantit\u00e9 de m\u00e9moire importante pour stocker plusieurs dizaines de programmes python en m\u00eame temps et des fichiers audio.","title":" Le microcontr\u00f4leur ESP32-S2 (WiFi et Bluetooth)"},{"location":"galaxia/#lecran-lcd","text":"Il a une taille de 1,8 pouces en diagonale et dispose d'une r\u00e9solution de 128\u00d7160 pixels et d'un r\u00e9tro\u00e9clairage \u00e0 LED blanche. Il peut afficher une grande vari\u00e9t\u00e9 de couleurs : 262 144 tonalit\u00e9s de couleurs (18 bits). Il permet d'afficher du texte, des donn\u00e9es et des \u00e9l\u00e9ments graphiques. Enfin, il permet de naviguer dans le menu Syst\u00e8me pour acc\u00e9der \u00e0 plusieurs fonctionnalit\u00e9s d\u00e9crites plus bas.","title":" L'\u00e9cran LCD"},{"location":"galaxia/#une-led-rgb","text":"Elle int\u00e8gre en fait 3 LEDs (rouge, vert et bleu) dans un seul bo\u00eetier pour vous permettre de composer les couleurs de votre choix. On parle dans ce cas de synth\u00e8se additive des couleurs (\u00e0 la diff\u00e9rence de la peinture o\u00f9 l'on combine les couleurs primaires : cyan, magenta et jaune avec une synth\u00e8se soustractive). Cette LED offre un indicateur lumineux simple \u00e0 programmer pour indiquer diff\u00e9rentes informations en fonction des couleurs choisies. Sa luminosit\u00e9 offre une capacit\u00e9 d'\u00e9clairage qui peut permettre d'\u00e9clairer un objet dans un environnement sombre. Pour chacune des 3 couleurs, on peut r\u00e9gler l'intensit\u00e9 lumineuse avec une valeur comprise entre 0 (absence de luminosit\u00e9) et 255 (luminosit\u00e9 maximale).","title":" Une led RGB"},{"location":"galaxia/#un-capteur-de-lumiere","text":"Il est int\u00e9gr\u00e9 \u00e0 la LED et capte la luminosit\u00e9 qui lui parvient. La captation est tr\u00e8s directionnelle, cela signifie qu'il faut bien pointer la LED dans la direction de la lumi\u00e8re que l'on veut mesurer. Les valeurs obtenues vont de 0 \u00e0 255. En combinaison avec l\u2019\u00e9cran vous pouvez afficher un graphique pr\u00e9sentant l\u2019\u00e9volution de la luminosit\u00e9. Programmez une alarme lorsque qu\u2019un tiroir est ouvert ou ferm\u00e9, programmez une prise connect\u00e9e qui allumera votre lampe lorsque la luminosit\u00e9 baisse, et bien d\u2019autres exp\u00e9riences.","title":" Un capteur de lumi\u00e8re"},{"location":"galaxia/#la-prise-jack-audio","text":"Elle offre une entr\u00e9e et une sortie audio \u00e0 la Galaxia. Vous pouvez y brancher un micro pour exploiter l'entr\u00e9e audio, une enceinte pour exploiter la sortie, ou un kit main libre pour profiter des deux en m\u00eame temps.","title":" La prise jack audio"},{"location":"galaxia/#le-magnetometre","text":"Ce capteur permet de mesurer un champ magn\u00e9tique dans un espace en 3 dimensions. L'usage qui nous int\u00e9ressera le plus souvent est la d\u00e9tection du nord magn\u00e9tique. Ainsi, vous pourrez programmer votre carte comme une boussole ou trouvez votre orientation par rapport au nord.","title":" Le magn\u00e9tom\u00e8tre"},{"location":"galaxia/#deux-boutons-poussoirs","text":"Vous pouvez d\u00e9tecter s'ils ont \u00e9t\u00e9 appuy\u00e9 bri\u00e8vement ou s'ils sont maintenus appuy\u00e9s. G\u00e9n\u00e9ralement, on utilise cette d\u00e9tection d'appui pour d\u00e9clencher des actions en cons\u00e9quence.","title":" Deux boutons poussoirs"},{"location":"galaxia/#quatre-boutons-tactiles","text":"Leur utilisation n'est pas tr\u00e8s diff\u00e9rente de celle des boutons A et B. Ils sont dispos\u00e9s en cercle pour offrir un pad tactile qui peut \u00eatre utilis\u00e9 comme une fl\u00e8che directionnelle, ils donnent ainsi \u00e0 la Galaxia un petit air de console de jeu.","title":" Quatre boutons tactiles"},{"location":"galaxia/#le-port-micro-usb","text":"Il vous sert \u00e0 alimenter votre Galaxia, \u00e0 communiquer/programmer avec l'ordinateur gr\u00e2ce au port s\u00e9rie . Une fois programm\u00e9e, on peut l'utiliser pour brancher une batterie USB et ainsi faire des objets mobiles.","title":" Le port micro-USB"},{"location":"galaxia/#une-connectique-compatible-microbit","text":"Il vous permet de connecter la carte Galaxia \u00e0 des robots, comme le Maqueen ou d'autres accessoires compatibles micro:bit.","title":"Une connectique compatible micro:bit"},{"location":"galaxia/#brancher-la-carte-galaxia-a-un-ordinateur","text":"Info La section qui suit est destin\u00e9e aux heureux\u00b7euses propri\u00e9taires de notre kit MOOCs MicroPython . L'achat de ce kit est optionnel et toutes les activit\u00e9s de ce MOOC peut \u00eatre simul\u00e9es avec l'interface Vittascience . L'interface Vittascience permet de simuler une carte \u00e9lectronique, des capteurs et des actionneurs. Et \u00e7a c'est chouette ! Mais ce qui est encore mieux, c'est de manipuler tout \u00e7a dans la vraie vie Pour cela, veuillez suivre les \u00e9tapes ci-dessous : Connectez le port micro-usb de votre Galaxia \u00e0 votre ordinateur en utilisant le c\u00e2ble micro-USB vers USB fourni dans le kit. Depuis le navigateur Chrome (ou Edge ou Opera), ouvrez l' interface Vittascience et ouvrez la console en bas de l'interface avec le petit bouton . Cliquez ensuite sur le bouton REPL pour ouvrir la communication entre votre ordinateur et la carte Galaxia. Choissisez enfin le port USB sur lequel est branch\u00e9 votre Galaxia et cliquez sur Connexion D\u00e8s lors, vous pouvez voir les messages envoy\u00e9es depuis votre carte Galaxia (pour en savoir plus sur les messages sur le port s\u00e9rie, c'est par ici Vous pouvez \u00e9galement t\u00e9leverser votre code sur la carte gr\u00e2ce au bouton T\u00e9l\u00e9verser","title":"Brancher la carte Galaxia \u00e0 un ordinateur"},{"location":"interface/","text":"Interface Vittascience \u00b6 L'interface de programmation Vittascience permet de programmer la carte \u00e9lectronique Galaxia depuis votre navigateur web en assemblant visuellement des blocs comme un puzzle. Ces blocs vont ensuite g\u00e9n\u00e9rer automatiquement un code MicroPython compr\u00e9hensible par la carte. Pour acc\u00e9der \u00e0 cette interface, rendez-vous sur l'onglet Interface Vittascience dans le MOOC ou directement \u00e0 lien . Accessibilit\u00e9 \u00b6 L'\u00e9quipe Vittascience travaille continuellement \u00e0 am\u00e9liorer le niveau d'accessibilit\u00e9 du site Vittascience et sa conformit\u00e9 avec les normes en la mati\u00e8re. Pour plus d'informations, veuillez consulter cette page .","title":"L'interface Vittascience"},{"location":"interface/#interface-vittascience","text":"L'interface de programmation Vittascience permet de programmer la carte \u00e9lectronique Galaxia depuis votre navigateur web en assemblant visuellement des blocs comme un puzzle. Ces blocs vont ensuite g\u00e9n\u00e9rer automatiquement un code MicroPython compr\u00e9hensible par la carte. Pour acc\u00e9der \u00e0 cette interface, rendez-vous sur l'onglet Interface Vittascience dans le MOOC ou directement \u00e0 lien .","title":"Interface Vittascience"},{"location":"interface/#accessibilite","text":"L'\u00e9quipe Vittascience travaille continuellement \u00e0 am\u00e9liorer le niveau d'accessibilit\u00e9 du site Vittascience et sa conformit\u00e9 avec les normes en la mati\u00e8re. Pour plus d'informations, veuillez consulter cette page .","title":"Accessibilit\u00e9"},{"location":"actionneurs/servomoteur/","text":"Contr\u00f4ler un servomoteur \u00b6 Permet de contr\u00f4ler l'angle d'un servomoteur de 0\u00b0 \u00e0 180\u00b0. Branchement \u00b6 Exemple \u00b6 Dans l'exemple ci-dessous, nous allons placer le servomoteur (branch\u00e9 sur le port Grove 1 , broche P19 de la Galaxia) \u00e0 0\u00b0 pendant une seconde puis le placer \u00e0 90\u00b0 : Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from machine import * import utime # Initialisation du servomoteur sur la broche P19 p19 = PWM ( Pin ( 13 ), freq = 50 , duty = 205 ) # D\u00e9claration d'une fonction qui va s'occuper de positionner # le servomoteur \u00e0 un angle pass\u00e9 en param\u00e8tre # (si cet angle est bien compris entre 0 et 180) def setServoAngle ( pin , angle ): if ( angle >= 0 and angle <= 180 ): pin . duty ( int ( 0.025 * 1023 + ( angle * 0.1 * 1023 ) / 180 )) else : raise ValueError ( \"Attention, l'angle du servomoteur doit etre compris entre 0 et 180\" ) setServoAngle ( p19 , 0 ) utime . sleep ( 1 ) setServoAngle ( p19 , 90 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la class PWM () qui permet, entre autres, de contr\u00f4ler un servomoteur. Cette classe est d\u00e9taill\u00e9e dans la documentation MicroPython .","title":"Contr\u00f4ler  un servomoteur"},{"location":"actionneurs/servomoteur/#controler-un-servomoteur","text":"Permet de contr\u00f4ler l'angle d'un servomoteur de 0\u00b0 \u00e0 180\u00b0.","title":"Contr\u00f4ler un servomoteur"},{"location":"actionneurs/servomoteur/#branchement","text":"","title":"Branchement"},{"location":"actionneurs/servomoteur/#exemple","text":"Dans l'exemple ci-dessous, nous allons placer le servomoteur (branch\u00e9 sur le port Grove 1 , broche P19 de la Galaxia) \u00e0 0\u00b0 pendant une seconde puis le placer \u00e0 90\u00b0 : Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from machine import * import utime # Initialisation du servomoteur sur la broche P19 p19 = PWM ( Pin ( 13 ), freq = 50 , duty = 205 ) # D\u00e9claration d'une fonction qui va s'occuper de positionner # le servomoteur \u00e0 un angle pass\u00e9 en param\u00e8tre # (si cet angle est bien compris entre 0 et 180) def setServoAngle ( pin , angle ): if ( angle >= 0 and angle <= 180 ): pin . duty ( int ( 0.025 * 1023 + ( angle * 0.1 * 1023 ) / 180 )) else : raise ValueError ( \"Attention, l'angle du servomoteur doit etre compris entre 0 et 180\" ) setServoAngle ( p19 , 0 ) utime . sleep ( 1 ) setServoAngle ( p19 , 90 )","title":"Exemple"},{"location":"actionneurs/servomoteur/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la class PWM () qui permet, entre autres, de contr\u00f4ler un servomoteur. Cette classe est d\u00e9taill\u00e9e dans la documentation MicroPython .","title":"Aller plus loin"},{"location":"apparence/led/led/","text":"Contr\u00f4ler une LED \u00b6 Permet de contr\u00f4ler l'\u00e9tat de la LED connect\u00e9e sur une broche de la Galaxia. Branchement \u00b6 Exemple \u00b6 Dans l'exemple ci-dessous, nous allons allumer une LED branch\u00e9e sur la broche P0 pendant une seconde puis l'\u00e9teindre : Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # On importe les modules machine et utime from machine import * import utime # D\u00e9claration d'une broche en sortie sur la broche P0 # \u00e0 l'aide du constructeur Pin() led = Pin ( 3 , Pin . OUT ) # On allume la LED led . on () # On attend 1 seconde utime . sleep ( 1 ) # On \u00e9teint la LED led . off () Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Contr\u00f4ler une LED"},{"location":"apparence/led/led/#controler-une-led","text":"Permet de contr\u00f4ler l'\u00e9tat de la LED connect\u00e9e sur une broche de la Galaxia.","title":"Contr\u00f4ler une LED"},{"location":"apparence/led/led/#branchement","text":"","title":"Branchement"},{"location":"apparence/led/led/#exemple","text":"Dans l'exemple ci-dessous, nous allons allumer une LED branch\u00e9e sur la broche P0 pendant une seconde puis l'\u00e9teindre : Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # On importe les modules machine et utime from machine import * import utime # D\u00e9claration d'une broche en sortie sur la broche P0 # \u00e0 l'aide du constructeur Pin() led = Pin ( 3 , Pin . OUT ) # On allume la LED led . on () # On attend 1 seconde utime . sleep ( 1 ) # On \u00e9teint la LED led . off ()","title":"Exemple"},{"location":"apparence/led/led/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"apparence/led/led_pmw/","text":"R\u00e9gler la luminosit\u00e9 d'une LED \u00b6 Permet de r\u00e9gler la luminosit\u00e9 d'une LED de 0 \u00e0 100% sur les broches PWM. Branchement \u00b6 Exemple \u00b6 Dans l'exemple ci-dessous, nous allons allumer une LED branch\u00e9e sur la broche P0 \u00e0 la moiti\u00e9 de son intensit\u00e9 lumineuse maximale, nous attendrons ensuite une seconde puis on viendra l'\u00e9teindre : Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # On importe les modules machine et utime from machine import * import utime # D\u00e9claration d'une broche en sortie sur la broche P0 # \u00e0 l'aide du constructeur PWM() p3 = PWM ( Pin ( 3 ), freq = 50 , duty = 0 ) # On vient faire un produit en croix pour obtenir # 50% de la luminosit\u00e9 maximale p3 . duty ( int ( 50 * 1023 / 100 )) # On attend 1 seconde utime . sleep ( 1 ) # On \u00e9teint la LED p3 . duty ( 0 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la classe PWM qui permet de r\u00e9gler finement les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"R\u00e9gler la luminosit\u00e9 d'une LED"},{"location":"apparence/led/led_pmw/#regler-la-luminosite-dune-led","text":"Permet de r\u00e9gler la luminosit\u00e9 d'une LED de 0 \u00e0 100% sur les broches PWM.","title":"R\u00e9gler la luminosit\u00e9 d'une LED"},{"location":"apparence/led/led_pmw/#branchement","text":"","title":"Branchement"},{"location":"apparence/led/led_pmw/#exemple","text":"Dans l'exemple ci-dessous, nous allons allumer une LED branch\u00e9e sur la broche P0 \u00e0 la moiti\u00e9 de son intensit\u00e9 lumineuse maximale, nous attendrons ensuite une seconde puis on viendra l'\u00e9teindre : Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # On importe les modules machine et utime from machine import * import utime # D\u00e9claration d'une broche en sortie sur la broche P0 # \u00e0 l'aide du constructeur PWM() p3 = PWM ( Pin ( 3 ), freq = 50 , duty = 0 ) # On vient faire un produit en croix pour obtenir # 50% de la luminosit\u00e9 maximale p3 . duty ( int ( 50 * 1023 / 100 )) # On attend 1 seconde utime . sleep ( 1 ) # On \u00e9teint la LED p3 . duty ( 0 )","title":"Exemple"},{"location":"apparence/led/led_pmw/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la classe PWM qui permet de r\u00e9gler finement les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"apparence/led_rgb/led_rgb/","text":"Contr\u00f4ler la LED RGB de la Galaxia \u00b6 Permet de r\u00e9gler l'intensit\u00e9 de la LED int\u00e9gr\u00e9e \u00e0 la carte Galaxia, de 0 \u00e0 100 pour chacune des couleurs (rouge, vert, bleu). Branchement \u00b6 Exemple \u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 # On importe le sous-module appel\u00e9 led depuis le module thingz from thingz import led # On utilise la fonction set_colors pour allumer la LED RGB en rouge led . set_colors ( 100 , 0 , 0 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons le module thingz qui est d\u00e9crit en d\u00e9tails ici .","title":"Contr\u00f4ler une LED RGB"},{"location":"apparence/led_rgb/led_rgb/#controler-la-led-rgb-de-la-galaxia","text":"Permet de r\u00e9gler l'intensit\u00e9 de la LED int\u00e9gr\u00e9e \u00e0 la carte Galaxia, de 0 \u00e0 100 pour chacune des couleurs (rouge, vert, bleu).","title":"Contr\u00f4ler la LED RGB de la Galaxia"},{"location":"apparence/led_rgb/led_rgb/#branchement","text":"","title":"Branchement"},{"location":"apparence/led_rgb/led_rgb/#exemple","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 # On importe le sous-module appel\u00e9 led depuis le module thingz from thingz import led # On utilise la fonction set_colors pour allumer la LED RGB en rouge led . set_colors ( 100 , 0 , 0 )","title":"Exemple"},{"location":"apparence/led_rgb/led_rgb/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons le module thingz qui est d\u00e9crit en d\u00e9tails ici .","title":"Aller plus loin"},{"location":"boucles/boucle_avec_variable/","text":"Boucle avec variable \u00b6 Faire prendre \u00e0 la variable i les valeurs depuis le nombre de d\u00e9but jusqu\u2019au nombre de fin, en s\u2019incr\u00e9mentant du pas sp\u00e9cifi\u00e9, et ex\u00e9cuter les instructions situ\u00e9es dans la boucle. Exemple \u00b6 Exemple avec des blocs Exemple avec du code Info Le bloc variable peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Variables . Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che ( ) situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable. 1 2 3 4 5 6 7 8 9 # On importe le module utime import utime # On utilise une boucle For pour ex\u00e9cuter # 10 fois les fonctions print() et sleep() for i in range ( 10 ): # Notez que la fonction print() peut prendre plusieurs arguments print ( i , \" secondes \u00e9coul\u00e9es\" ) utime . sleep ( 1 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () et range () . Pour en savoir plus sur la fonction range () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"R\u00e9p\u00e9ter en comptant"},{"location":"boucles/boucle_avec_variable/#boucle-avec-variable","text":"Faire prendre \u00e0 la variable i les valeurs depuis le nombre de d\u00e9but jusqu\u2019au nombre de fin, en s\u2019incr\u00e9mentant du pas sp\u00e9cifi\u00e9, et ex\u00e9cuter les instructions situ\u00e9es dans la boucle.","title":"Boucle avec variable"},{"location":"boucles/boucle_avec_variable/#exemple","text":"Exemple avec des blocs Exemple avec du code Info Le bloc variable peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Variables . Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che ( ) situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable. 1 2 3 4 5 6 7 8 9 # On importe le module utime import utime # On utilise une boucle For pour ex\u00e9cuter # 10 fois les fonctions print() et sleep() for i in range ( 10 ): # Notez que la fonction print() peut prendre plusieurs arguments print ( i , \" secondes \u00e9coul\u00e9es\" ) utime . sleep ( 1 )","title":"Exemple"},{"location":"boucles/boucle_avec_variable/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () et range () . Pour en savoir plus sur la fonction range () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"boucles/boucle_iterative/","text":"Boucle it\u00e9rative \u00b6 Dans le cas de processus redondants, plut\u00f4t que d'\u00e9crire le processus de multiple fois avec des param\u00e8tres diff\u00e9rents, il est pr\u00e9f\u00e9rable d'utiliser une boucle avec variable ( for ) ainsi qu'une ou plusieurs listes ou sont stock\u00e9es toutes les variables n\u00e9cessaires. La boucle for se charge de la structure du processus. La(les) liste(s) s'occupe(nt) des donn\u00e9es. A chaque entr\u00e9e dans la boucle on vient chercher dans la ou les listes, les param\u00e8tres du prochain cas. Exemples \u00b6 Exemple avec des blocs Exemple avec du code Info Le bloc variable peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Variables . Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che ( ) situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable. le bloc qui permet de parcourir une liste se trouve sous la cat\u00e9gorie Boucles . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from machine import * import utime # Servo on p26 d2 = PWM ( Pin ( 26 ), freq = 50 , duty = 0 ) # on cr\u00e9er une fonction pour calculer le duty et l'appliquer au servomoteur, \u00e0 partir d'un angle donn\u00e9. def setServoAngle ( pin , angle ): if ( angle >= 0 and angle <= 180 ): pin . duty ( int ( 0.025 * 1023 + ( angle * 0.1 * 1023 ) / 180 )) else : raise ValueError ( \"Servomotor angle have to be set between 0 and 180\" ) # on d\u00e9fini une liste d'angle angles = [ 10 , 90 , 30 ] while True : #pour chaque angle de la liste angles on applique la fonction cr\u00e9er pr\u00e9c\u00e9demment for i in angles : setServoAngle ( d2 , i ) utime . sleep ( 5 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython def , for et if else . Pour en savoir plus sur def , nous vous invitons \u00e0 lire la documentation MicroPython . Pour en savoir plus sur for in , nous vous invitons \u00e0 lire la documentation MicroPython . Pour en savoir plus sur if else , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"R\u00e9p\u00e9ter selon des \u00e9l\u00e9ments"},{"location":"boucles/boucle_iterative/#boucle-iterative","text":"Dans le cas de processus redondants, plut\u00f4t que d'\u00e9crire le processus de multiple fois avec des param\u00e8tres diff\u00e9rents, il est pr\u00e9f\u00e9rable d'utiliser une boucle avec variable ( for ) ainsi qu'une ou plusieurs listes ou sont stock\u00e9es toutes les variables n\u00e9cessaires. La boucle for se charge de la structure du processus. La(les) liste(s) s'occupe(nt) des donn\u00e9es. A chaque entr\u00e9e dans la boucle on vient chercher dans la ou les listes, les param\u00e8tres du prochain cas.","title":"Boucle it\u00e9rative"},{"location":"boucles/boucle_iterative/#exemples","text":"Exemple avec des blocs Exemple avec du code Info Le bloc variable peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Variables . Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che ( ) situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable. le bloc qui permet de parcourir une liste se trouve sous la cat\u00e9gorie Boucles . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from machine import * import utime # Servo on p26 d2 = PWM ( Pin ( 26 ), freq = 50 , duty = 0 ) # on cr\u00e9er une fonction pour calculer le duty et l'appliquer au servomoteur, \u00e0 partir d'un angle donn\u00e9. def setServoAngle ( pin , angle ): if ( angle >= 0 and angle <= 180 ): pin . duty ( int ( 0.025 * 1023 + ( angle * 0.1 * 1023 ) / 180 )) else : raise ValueError ( \"Servomotor angle have to be set between 0 and 180\" ) # on d\u00e9fini une liste d'angle angles = [ 10 , 90 , 30 ] while True : #pour chaque angle de la liste angles on applique la fonction cr\u00e9er pr\u00e9c\u00e9demment for i in angles : setServoAngle ( d2 , i ) utime . sleep ( 5 )","title":"Exemples"},{"location":"boucles/boucle_iterative/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython def , for et if else . Pour en savoir plus sur def , nous vous invitons \u00e0 lire la documentation MicroPython . Pour en savoir plus sur for in , nous vous invitons \u00e0 lire la documentation MicroPython . Pour en savoir plus sur if else , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"boucles/boucle_simple/","text":"Boucle simple \u00b6 \u00c9x\u00e9cuter des instructions plusieurs fois. Exemple \u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 # On utilise une boucle For pour ex\u00e9cuter # 3 fois la fonction print() for count in range ( 3 ): print ( 'toc !' ); Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () ) et range () . Pour en savoir plus sur la fonction range () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"R\u00e9p\u00e9ter"},{"location":"boucles/boucle_simple/#boucle-simple","text":"\u00c9x\u00e9cuter des instructions plusieurs fois.","title":"Boucle simple"},{"location":"boucles/boucle_simple/#exemple","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 # On utilise une boucle For pour ex\u00e9cuter # 3 fois la fonction print() for count in range ( 3 ): print ( 'toc !' );","title":"Exemple"},{"location":"boucles/boucle_simple/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () ) et range () . Pour en savoir plus sur la fonction range () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"capteurs/bouton_poussoir_avec_interruption/","text":"Bouton poussoir avec interruption \u00b6 Faire quelque chose quand un bouton (A ou B) est appuy\u00e9 et rel\u00e2ch\u00e9. Branchement \u00b6 Exemple \u00b6 Dans l'exemple ci-dessous, nous allons faire clignoter la LED RGB de la Galaxia en rouge pendant 1 seconde puis en bleue pedant une seconde. Si le bouton A est appuy\u00e9 puis rel\u00e2ch\u00e9 (cet \u00e9v\u00e9nement est appel\u00e9 une interruption) alors la LED RGB passera en verte pendant une seconde : Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # On importe les modules dont on a besoin import utime from machine import * from thingz import * def bouton_A_relache ( button ): # On passe la LED RGB \u00e0 verte led . set_colors ( 0 , 100 , 0 ) utime . sleep ( 1 ) # On accroche l'interruption \u00e0 la fonction bouton_A_relache button_a . on_button_pressed ( bouton_A_relache ) while True : # On passe la LED RGB \u00e0 rouge led . set_colors ( 100 , 0 , 0 ) utime . sleep ( 1 ) # On passe la LED RGB \u00e0 bleue led . set_colors ( 0 , 0 , 100 ) utime . sleep ( 1 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la classe PWM qui permet de r\u00e9gler finement les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Bouton poussoir avec interruption"},{"location":"capteurs/bouton_poussoir_avec_interruption/#bouton-poussoir-avec-interruption","text":"Faire quelque chose quand un bouton (A ou B) est appuy\u00e9 et rel\u00e2ch\u00e9.","title":"Bouton poussoir avec interruption"},{"location":"capteurs/bouton_poussoir_avec_interruption/#branchement","text":"","title":"Branchement"},{"location":"capteurs/bouton_poussoir_avec_interruption/#exemple","text":"Dans l'exemple ci-dessous, nous allons faire clignoter la LED RGB de la Galaxia en rouge pendant 1 seconde puis en bleue pedant une seconde. Si le bouton A est appuy\u00e9 puis rel\u00e2ch\u00e9 (cet \u00e9v\u00e9nement est appel\u00e9 une interruption) alors la LED RGB passera en verte pendant une seconde : Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # On importe les modules dont on a besoin import utime from machine import * from thingz import * def bouton_A_relache ( button ): # On passe la LED RGB \u00e0 verte led . set_colors ( 0 , 100 , 0 ) utime . sleep ( 1 ) # On accroche l'interruption \u00e0 la fonction bouton_A_relache button_a . on_button_pressed ( bouton_A_relache ) while True : # On passe la LED RGB \u00e0 rouge led . set_colors ( 100 , 0 , 0 ) utime . sleep ( 1 ) # On passe la LED RGB \u00e0 bleue led . set_colors ( 0 , 0 , 100 ) utime . sleep ( 1 )","title":"Exemple"},{"location":"capteurs/bouton_poussoir_avec_interruption/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la classe PWM qui permet de r\u00e9gler finement les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"capteurs/capteur_acceleration/","text":"Acc\u00e9l\u00e9rom\u00e8tre \u00b6 Un acc\u00e9l\u00e9rom\u00e8tre est int\u00e9gr\u00e9 \u00e0 la galaxia. Il permet de capter l'acc\u00e9l\u00e9ration de la carte suivant les diff\u00e9rents axes ou la force d'un choc. Mesurer l'acc\u00e9l\u00e9ration permet de calculer la vitesse, le d\u00e9placement, les chocs et les vibrations de la carte Exemple \u00b6 Exemple avec des blocs Exemple avec du code ouvrir dans vittascience 1 2 3 4 5 from machine import * from thingz import * while True : print ( str ( accelerometer . get_x ())); Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython . Nous utilisons aussi str () , nous vous invitons \u00e0 lire la documentation MicroPython . et enfin la librairie thingz avec sa biblioth\u00e8que adapt\u00e9e \u00e0 l'acc\u00e9l\u00e9rom\u00e8tre Pour en savoir plus sur les acc\u00e9l\u00e9rom\u00e8tres. la page wikip\u00e9dia Universit\u00e9 de Bordeaux","title":"Capter l'acc\u00e9l\u00e9ration"},{"location":"capteurs/capteur_acceleration/#accelerometre","text":"Un acc\u00e9l\u00e9rom\u00e8tre est int\u00e9gr\u00e9 \u00e0 la galaxia. Il permet de capter l'acc\u00e9l\u00e9ration de la carte suivant les diff\u00e9rents axes ou la force d'un choc. Mesurer l'acc\u00e9l\u00e9ration permet de calculer la vitesse, le d\u00e9placement, les chocs et les vibrations de la carte","title":"Acc\u00e9l\u00e9rom\u00e8tre"},{"location":"capteurs/capteur_acceleration/#exemple","text":"Exemple avec des blocs Exemple avec du code ouvrir dans vittascience 1 2 3 4 5 from machine import * from thingz import * while True : print ( str ( accelerometer . get_x ()));","title":"Exemple"},{"location":"capteurs/capteur_acceleration/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython . Nous utilisons aussi str () , nous vous invitons \u00e0 lire la documentation MicroPython . et enfin la librairie thingz avec sa biblioth\u00e8que adapt\u00e9e \u00e0 l'acc\u00e9l\u00e9rom\u00e8tre Pour en savoir plus sur les acc\u00e9l\u00e9rom\u00e8tres. la page wikip\u00e9dia Universit\u00e9 de Bordeaux","title":"Aller plus loin"},{"location":"capteurs/capteur_lumiere/","text":"Capteur de luminosit\u00e9 \u00b6 le capteur de luminosit\u00e9 est int\u00e9gr\u00e9 \u00e0 la led rgb du galaxia. Il permet de transformer l'intensit\u00e9 lumineuse en une valeur num\u00e9rique. Exemple \u00b6 Exemple avec des blocs Exemple avec du code ouvrir dans vittascience 1 print ( str ( led . read ())); Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython . Nous utilisons aussi str () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Capter la luminosit\u00e9"},{"location":"capteurs/capteur_lumiere/#capteur-de-luminosite","text":"le capteur de luminosit\u00e9 est int\u00e9gr\u00e9 \u00e0 la led rgb du galaxia. Il permet de transformer l'intensit\u00e9 lumineuse en une valeur num\u00e9rique.","title":"Capteur de luminosit\u00e9"},{"location":"capteurs/capteur_lumiere/#exemple","text":"Exemple avec des blocs Exemple avec du code ouvrir dans vittascience 1 print ( str ( led . read ()));","title":"Exemple"},{"location":"capteurs/capteur_lumiere/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython . Nous utilisons aussi str () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"capteurs/capteur_ultrason/","text":"Capteur \u00e0 Ultrason \u00b6 Le capteur \u00e0 ultrason fonctionne comme son nom l'indique \u00e0 l'aide d'ultrason. il est r\u00e9alis\u00e9 avec un module \u00e9metteur d'ultrason et un module capteur d'ultrason Le temps mis pour l'onde ultrasonore pour faire l'aller retour, capteur obstacle, donne la distance \u00e0 laquelle se trouve celui-ci. Exemple \u00b6 Exemple avec des blocs Exemple avec du code ouvrir dans vittascience 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from machine import * from thingz import * import utime # Ultrasonic on p7 # d\u00e9finition de la fonction pour extraire la distance du capteur def grove_getUltrasonicData ( pinNumber , data = 'distance' , timeout_us = 30000 ): trig = Pin ( pinNumber , Pin . OUT ) trig . off () utime . sleep_us ( 2 ) trig . on () utime . sleep_us ( 10 ) trig . off () echo = Pin ( pinNumber , Pin . IN ) duration = time_pulse_us ( echo , 1 , timeout_us ) / 1e6 # t_echo in seconds if duration > 0 : if data == 'distance' : #sound speed, round-trip/2, get in cm return 343 * duration / 2 * 100 elif data == 'duration' : return duration else : raise ValueError ( \"Data option '\" + data + \"' is not valid\" ) else : return - 1 while True : # impression de la distance calcul\u00e9e par le capteur branch\u00e9 broche 7 print ( str ( grove_getUltrasonicData ( 7 , data = 'distance' ))); Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython . Nous utilisons aussi str () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Capter la distance"},{"location":"capteurs/capteur_ultrason/#capteur-a-ultrason","text":"Le capteur \u00e0 ultrason fonctionne comme son nom l'indique \u00e0 l'aide d'ultrason. il est r\u00e9alis\u00e9 avec un module \u00e9metteur d'ultrason et un module capteur d'ultrason Le temps mis pour l'onde ultrasonore pour faire l'aller retour, capteur obstacle, donne la distance \u00e0 laquelle se trouve celui-ci.","title":"Capteur \u00e0 Ultrason"},{"location":"capteurs/capteur_ultrason/#exemple","text":"Exemple avec des blocs Exemple avec du code ouvrir dans vittascience 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from machine import * from thingz import * import utime # Ultrasonic on p7 # d\u00e9finition de la fonction pour extraire la distance du capteur def grove_getUltrasonicData ( pinNumber , data = 'distance' , timeout_us = 30000 ): trig = Pin ( pinNumber , Pin . OUT ) trig . off () utime . sleep_us ( 2 ) trig . on () utime . sleep_us ( 10 ) trig . off () echo = Pin ( pinNumber , Pin . IN ) duration = time_pulse_us ( echo , 1 , timeout_us ) / 1e6 # t_echo in seconds if duration > 0 : if data == 'distance' : #sound speed, round-trip/2, get in cm return 343 * duration / 2 * 100 elif data == 'duration' : return duration else : raise ValueError ( \"Data option '\" + data + \"' is not valid\" ) else : return - 1 while True : # impression de la distance calcul\u00e9e par le capteur branch\u00e9 broche 7 print ( str ( grove_getUltrasonicData ( 7 , data = 'distance' )));","title":"Exemple"},{"location":"capteurs/capteur_ultrason/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython . Nous utilisons aussi str () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"communication/ecrire_dans_la_console/","text":"\u00c9crire dans la console \u00b6 Permet d'\u00e9crire des donn\u00e9es dans le port s\u00e9rie (appel\u00e9 \u00e9galement console ou encore REPL ). Le port s\u00e9rie permet d'\u00e9changer des donn\u00e9es entre la carte Galaxia et l'ordinateur gr\u00e2ce \u00e0 la liaison USB. Lorsque vous utilisez l'interface Vittascience, vous pouvez voir les donn\u00e9es re\u00e7ues de la carte (ou du simulateur) gr\u00e2ce au bouton REPL situ\u00e9 en bas de l'interface . Exemple \u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 # print() fait partie du langage MicroPython # pas besoin d'importer un module # Affichage d'un message avec la fonction print() print ( \"Bonjour !\" ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"\u00c9crire dans la console"},{"location":"communication/ecrire_dans_la_console/#ecrire-dans-la-console","text":"Permet d'\u00e9crire des donn\u00e9es dans le port s\u00e9rie (appel\u00e9 \u00e9galement console ou encore REPL ). Le port s\u00e9rie permet d'\u00e9changer des donn\u00e9es entre la carte Galaxia et l'ordinateur gr\u00e2ce \u00e0 la liaison USB. Lorsque vous utilisez l'interface Vittascience, vous pouvez voir les donn\u00e9es re\u00e7ues de la carte (ou du simulateur) gr\u00e2ce au bouton REPL situ\u00e9 en bas de l'interface .","title":"\u00c9crire dans la console"},{"location":"communication/ecrire_dans_la_console/#exemple","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 # print() fait partie du langage MicroPython # pas besoin d'importer un module # Affichage d'un message avec la fonction print() print ( \"Bonjour !\" )","title":"Exemple"},{"location":"communication/ecrire_dans_la_console/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Aller plus loin"},{"location":"controle/executer_des_instructions_selon_des_conditions/","text":"Permet d'ex\u00e9cuter des instructions si une condition parmi plusieurs est vraie. Dans l'exemple ci-dessous, nous allons modifier l'\u00e9tat d'une LED RGB, En vert si le bouton A seul est appuy\u00e9. En orange si le bouton B seul est appuy\u00e9. En rouge si les boutons A et B sont tous les deux appuy\u00e9s. \u00c9teinte si aucun des boutons est appuy\u00e9. Exemple avec des blocs Exemple avec du code Info Le bloc if peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Contr\u00f4le . Notez qu'une condition issue de la cat\u00e9gorie de bloc Op\u00e9rateurs doit \u00eatre fournie pour que ce bloc soit fonctionnel. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # On boucle ind\u00e9finiment while True : # si le bouton A seul est appuy\u00e9 if button_a . is_pressed () and not button_b . is_pressed (): # on allume la led de couleur verte led . set_colors ( 0 , 255 , 0 ) # si le bouton B seul est appuy\u00e9 elif not button_a . is_pressed () and button_b . is_pressed (): # on allume la led de couleur orange led . set_colors ( 255 , 140 , 0 ) # si le bouton A et le bouton B sont appuy\u00e9s elif button_a . is_pressed () and button_b . is_pressed (): # on allume la led de couleur rouge led . set_colors ( 255 , 0 , 0 ) else : # on garde chaque canaux de la led \u00e0 zero (intensit\u00e9 nulle) led . set_colors ( 0 , 0 , 0 ) Si la partie entre if et les : est \u00e9valu\u00e9e comme vrai alors les instructions indent\u00e9es qui suivent les : seront ex\u00e9cut\u00e9es. Sinon ce sont les instructions situ\u00e9es apr\u00e8s le else : qui le seront. Aller plus loin \u00b6 On a souvent l'habitude de repr\u00e9senter le cours du programme avec un organigramme de programmation : Si vous voulez en savoir plus sur les organigrammes, voici une chouette page Wikip\u00e9dia . Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython if et else . Pour en savoir plus, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Ex\u00e9cuter selon des conditions"},{"location":"controle/executer_des_instructions_selon_des_conditions/#aller-plus-loin","text":"On a souvent l'habitude de repr\u00e9senter le cours du programme avec un organigramme de programmation : Si vous voulez en savoir plus sur les organigrammes, voici une chouette page Wikip\u00e9dia . Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython if et else . Pour en savoir plus, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"controle/executer_des_instructions_selon_une_condition/","text":"Ex\u00e9cuter des instructions si une condition est vraie ou non \u00b6 Permet d'ex\u00e9cuter des instructions si une condition est vraie. Dans l'exemple ci-dessous, nous allons allumer la LED RGB de la Galaxia en rouge si le seuil de luminosit\u00e9 est sup\u00e9rieur \u00e0 un certain seuil (125), sinon la LED est allum\u00e9e en vert. Exemple avec des blocs Exemple avec du code Info Le bloc if peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Contr\u00f4le . Notez qu'une condition issue de la cat\u00e9gorie de bloc Op\u00e9rateurs doit \u00eatre fournie pour que ce bloc soit fonctionnel. 1 2 3 4 5 6 7 8 9 # On boucle ind\u00e9finiment while True : # Si le niveau de luminosit\u00e9 relev\u00e9 par le capteur est sup\u00e9rieur \u00e0 125 if led . read_light_level () > 125 : # Alors on allume la LED RVB en rouge led . set_colors ( 255 , 0 , 0 ) else : # Sinon on allume la LED RVB en vert led . set_colors ( 0 , 255 , 0 ) Si la partie entre if et les : est \u00e9valu\u00e9e comme vrai alors les instructions indent\u00e9es qui suivent les : seront ex\u00e9cut\u00e9es. Sinon ce sont les instructions situ\u00e9es apr\u00e8s le else : qui le seront. Aller plus loin \u00b6 Pour se repr\u00e9senter le programme pr\u00e9c\u00e9dent, on peut s'aider d'un organigramme : graph TD A[Au d\u00e9marrage] --> B{Luminosit\u00e9 > 125 ?}; B -->|Vrai| C[Allumer la LED en rouge]; C --> B; B -->|Faux| D[Allumer la LED en vert]; D --> B; Si vous voulez en savoir plus sur les organigrammes, voici une chouette page Wikip\u00e9dia . Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython if et else . Pour en savoir plus, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Ex\u00e9cuter selon une condition"},{"location":"controle/executer_des_instructions_selon_une_condition/#executer-des-instructions-si-une-condition-est-vraie-ou-non","text":"Permet d'ex\u00e9cuter des instructions si une condition est vraie. Dans l'exemple ci-dessous, nous allons allumer la LED RGB de la Galaxia en rouge si le seuil de luminosit\u00e9 est sup\u00e9rieur \u00e0 un certain seuil (125), sinon la LED est allum\u00e9e en vert. Exemple avec des blocs Exemple avec du code Info Le bloc if peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Contr\u00f4le . Notez qu'une condition issue de la cat\u00e9gorie de bloc Op\u00e9rateurs doit \u00eatre fournie pour que ce bloc soit fonctionnel. 1 2 3 4 5 6 7 8 9 # On boucle ind\u00e9finiment while True : # Si le niveau de luminosit\u00e9 relev\u00e9 par le capteur est sup\u00e9rieur \u00e0 125 if led . read_light_level () > 125 : # Alors on allume la LED RVB en rouge led . set_colors ( 255 , 0 , 0 ) else : # Sinon on allume la LED RVB en vert led . set_colors ( 0 , 255 , 0 ) Si la partie entre if et les : est \u00e9valu\u00e9e comme vrai alors les instructions indent\u00e9es qui suivent les : seront ex\u00e9cut\u00e9es. Sinon ce sont les instructions situ\u00e9es apr\u00e8s le else : qui le seront.","title":"Ex\u00e9cuter des instructions si une condition est vraie ou non"},{"location":"controle/executer_des_instructions_selon_une_condition/#aller-plus-loin","text":"Pour se repr\u00e9senter le programme pr\u00e9c\u00e9dent, on peut s'aider d'un organigramme : graph TD A[Au d\u00e9marrage] --> B{Luminosit\u00e9 > 125 ?}; B -->|Vrai| C[Allumer la LED en rouge]; C --> B; B -->|Faux| D[Allumer la LED en vert]; D --> B; Si vous voulez en savoir plus sur les organigrammes, voici une chouette page Wikip\u00e9dia . Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython if et else . Pour en savoir plus, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"controle/temps/attendre/","text":"Attendre \u00b6 Effectue une pause dans l'ex\u00e9cution du code. Exemple \u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 # On importe le module utime import utime # Affichage d'un message avec la fonction print() print ( \"D\u00e9marrage du programme\" ) # On attend 1 seconde utime . sleep ( 1 ) print ( \"1 seconde \u00e9coul\u00e9e\" ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la fonction print () et le module utime qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur ce module, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Attendre"},{"location":"controle/temps/attendre/#attendre","text":"Effectue une pause dans l'ex\u00e9cution du code.","title":"Attendre"},{"location":"controle/temps/attendre/#exemple","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 # On importe le module utime import utime # Affichage d'un message avec la fonction print() print ( \"D\u00e9marrage du programme\" ) # On attend 1 seconde utime . sleep ( 1 ) print ( \"1 seconde \u00e9coul\u00e9e\" )","title":"Exemple"},{"location":"controle/temps/attendre/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la fonction print () et le module utime qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur ce module, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"controle/temps/chronometre/","text":"Utiliser le chronom\u00e8tre \u00b6 R\u00e9cup\u00e9rer le nombre de millisecondes \u00e9coul\u00e9es depuis le lancement de la carte. Exemple \u00b6 Exemple avec des blocs Exemple avec du code Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte . Le bloc permet d'arrondir un nombre flottant. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Math . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # On importe le module utime (pour ticks_ms et ticks_diff) import utime # On importe le module math (pour la fonction round) import math # On vient stocker le temps de d\u00e9but debut = utime . ticks_ms () # On r\u00e9p\u00e8te ind\u00e9finiment while True : # On affiche la diff\u00e9rence de temps entre maintenant et le d\u00e9but print ( round ( utime . ticks_diff ( utime . ticks_ms (), debut ) / 1000 ), \" secondes\" ) # On attend 1 seconde utime . sleep ( 1 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons le module utime qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Utiliser le chronom\u00e8tre"},{"location":"controle/temps/chronometre/#utiliser-le-chronometre","text":"R\u00e9cup\u00e9rer le nombre de millisecondes \u00e9coul\u00e9es depuis le lancement de la carte.","title":"Utiliser le chronom\u00e8tre"},{"location":"controle/temps/chronometre/#exemple","text":"Exemple avec des blocs Exemple avec du code Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte . Le bloc permet d'arrondir un nombre flottant. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Math . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # On importe le module utime (pour ticks_ms et ticks_diff) import utime # On importe le module math (pour la fonction round) import math # On vient stocker le temps de d\u00e9but debut = utime . ticks_ms () # On r\u00e9p\u00e8te ind\u00e9finiment while True : # On affiche la diff\u00e9rence de temps entre maintenant et le d\u00e9but print ( round ( utime . ticks_diff ( utime . ticks_ms (), debut ) / 1000 ), \" secondes\" ) # On attend 1 seconde utime . sleep ( 1 )","title":"Exemple"},{"location":"controle/temps/chronometre/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons le module utime qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"fonctions/fonction/","text":"D\u00e9finir une fonction \u00b6 Rendre une partie de programme accessible par son nom en lui passant tout ce qui lui est n\u00e9cessaire pour fonctionner. Les variables d\u00e9clar\u00e9es dans la fonction ne sont valable qu'en local dans la fonction ()(port\u00e9e d'une variable). De plus dans une fonction, les variables globales ne sont disponible qu'en lecture. Exemple \u00b6 Exemple avec des blocs Exemple avec du code Info Les blocs pour d\u00e9finir une fonction peuvent \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Fonctions . on ajoute le nombre de variables n\u00e9cessaires avec le . et on cr\u00e9\u00e9 les variables dans l'espace blanc sur le cot\u00e9 pr\u00e9vu \u00e0 cet effet Notez que dans cette cat\u00e9gorie il existe deux types de bloc. Des blocs pour les fonctions dont on r\u00e9cup\u00e8re le r\u00e9sultat dans le format de son choix. d'autre sans sortie 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from machine import * import time # LED Module on p26 d2 = Pin ( 26 , Pin . OUT ) # on d\u00e9fini la fonction par un nom explicite, # les variables d\u00e9clar\u00e9es dans la parenth\u00e8se pourront interagir avec le corps de la fonction def blink_par__seconde ( x ): d2 . on () time . sleep ( x ) d2 . off () # le corp de mon programme while True : # Appel de la fonction avec 2 comme param\u00e8tre blink_par__seconde ( 2 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la classe def qui permet de d\u00e9finir une fonction. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython . Plus haut on fait r\u00e9f\u00e9rence \u00e0 la port\u00e9e d'une variable pour en savoir plus sur cette notion la documentation Micropython","title":"Fonctions"},{"location":"fonctions/fonction/#definir-une-fonction","text":"Rendre une partie de programme accessible par son nom en lui passant tout ce qui lui est n\u00e9cessaire pour fonctionner. Les variables d\u00e9clar\u00e9es dans la fonction ne sont valable qu'en local dans la fonction ()(port\u00e9e d'une variable). De plus dans une fonction, les variables globales ne sont disponible qu'en lecture.","title":"D\u00e9finir une fonction"},{"location":"fonctions/fonction/#exemple","text":"Exemple avec des blocs Exemple avec du code Info Les blocs pour d\u00e9finir une fonction peuvent \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Fonctions . on ajoute le nombre de variables n\u00e9cessaires avec le . et on cr\u00e9\u00e9 les variables dans l'espace blanc sur le cot\u00e9 pr\u00e9vu \u00e0 cet effet Notez que dans cette cat\u00e9gorie il existe deux types de bloc. Des blocs pour les fonctions dont on r\u00e9cup\u00e8re le r\u00e9sultat dans le format de son choix. d'autre sans sortie 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from machine import * import time # LED Module on p26 d2 = Pin ( 26 , Pin . OUT ) # on d\u00e9fini la fonction par un nom explicite, # les variables d\u00e9clar\u00e9es dans la parenth\u00e8se pourront interagir avec le corps de la fonction def blink_par__seconde ( x ): d2 . on () time . sleep ( x ) d2 . off () # le corp de mon programme while True : # Appel de la fonction avec 2 comme param\u00e8tre blink_par__seconde ( 2 )","title":"Exemple"},{"location":"fonctions/fonction/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la classe def qui permet de d\u00e9finir une fonction. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython . Plus haut on fait r\u00e9f\u00e9rence \u00e0 la port\u00e9e d'une variable pour en savoir plus sur cette notion la documentation Micropython","title":"Aller plus loin"},{"location":"includes/abbreviations/","text":"","title":"Abbreviations"},{"location":"listes/liste_avec_elts/","text":"Liste avec \u00e9l\u00e9ments \u00b6 Utiliser une liste pour stocker une suite d'\u00e9l\u00e9ments. Pour profiter de tous les outils des listes pour g\u00e9rer ces \u00e9l\u00e9ments. Exemples \u00b6 Exemple avec des blocs Exemple avec du code Info Le bloc variable peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Variables . Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che ( ) situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable. Le bloc qui permet de parcourir une liste se trouve sous la cat\u00e9gorie Boucles . Le bloc pour affecter des \u00e9l\u00e9ments \u00e0 une liste se trouve dans la cat\u00e9gorie de blocs Listes . Le bloc pour affecter une liste a une variable lui se trouve dans la cat\u00e9gorie Variables . 1 2 3 4 5 6 # on cr\u00e9er une liste nomm\u00e9e bille mesBilles = [ 5 , 32 , 14 ] while True : for i in mesBilles : print ( str ( i )); Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () et str () . La fonction print () est d\u00e9taill\u00e9s dans la documentation MicroPython . Pour en savoir plus sur la fonction str () , nous vous invitons \u00e0 lire la documentation MicroPython . Nous utilisons une boucle it\u00e9rative et pour en savoir plus la aussi : la documentation MicroPython","title":"Cr\u00e9er une liste d'\u00e9l\u00e9ments"},{"location":"listes/liste_avec_elts/#liste-avec-elements","text":"Utiliser une liste pour stocker une suite d'\u00e9l\u00e9ments. Pour profiter de tous les outils des listes pour g\u00e9rer ces \u00e9l\u00e9ments.","title":"Liste avec \u00e9l\u00e9ments"},{"location":"listes/liste_avec_elts/#exemples","text":"Exemple avec des blocs Exemple avec du code Info Le bloc variable peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Variables . Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che ( ) situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable. Le bloc qui permet de parcourir une liste se trouve sous la cat\u00e9gorie Boucles . Le bloc pour affecter des \u00e9l\u00e9ments \u00e0 une liste se trouve dans la cat\u00e9gorie de blocs Listes . Le bloc pour affecter une liste a une variable lui se trouve dans la cat\u00e9gorie Variables . 1 2 3 4 5 6 # on cr\u00e9er une liste nomm\u00e9e bille mesBilles = [ 5 , 32 , 14 ] while True : for i in mesBilles : print ( str ( i ));","title":"Exemples"},{"location":"listes/liste_avec_elts/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () et str () . La fonction print () est d\u00e9taill\u00e9s dans la documentation MicroPython . Pour en savoir plus sur la fonction str () , nous vous invitons \u00e0 lire la documentation MicroPython . Nous utilisons une boucle it\u00e9rative et pour en savoir plus la aussi : la documentation MicroPython","title":"Aller plus loin"},{"location":"math/manipuler_des_nombres/","text":"Manipuler des nombres \u00b6 Le module math fournit des fonctions permettant de manipuler des nombres. Exemple \u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import math # On initialise une variable appel\u00e9e nombre \u00e0 6 nombre = 6 # La ligne suivante va afficher 6 dans la console print ( nombre ) nombre = nombre + 3 # La ligne suivante va afficher 9 dans la console print ( nombre ) nombre = math . sqrt ( nombre ) # La ligne suivante va afficher 3 dans la console print ( nombre ) nombre = nombre / 6 # La ligne suivante va afficher 0.5 dans la console print ( nombre ) nombre = math . ceil ( nombre ) # La ligne suivante va afficher 1 (arrondi par exc\u00e8s du nombre flottant 0.5) print ( nombre ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons le module math .Pour en savoir plus sur ce module, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Manipuler des nombres"},{"location":"math/manipuler_des_nombres/#manipuler-des-nombres","text":"Le module math fournit des fonctions permettant de manipuler des nombres.","title":"Manipuler des nombres"},{"location":"math/manipuler_des_nombres/#exemple","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import math # On initialise une variable appel\u00e9e nombre \u00e0 6 nombre = 6 # La ligne suivante va afficher 6 dans la console print ( nombre ) nombre = nombre + 3 # La ligne suivante va afficher 9 dans la console print ( nombre ) nombre = math . sqrt ( nombre ) # La ligne suivante va afficher 3 dans la console print ( nombre ) nombre = nombre / 6 # La ligne suivante va afficher 0.5 dans la console print ( nombre ) nombre = math . ceil ( nombre ) # La ligne suivante va afficher 1 (arrondi par exc\u00e8s du nombre flottant 0.5) print ( nombre )","title":"Exemple"},{"location":"math/manipuler_des_nombres/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons le module math .Pour en savoir plus sur ce module, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"quiz/quiz1-question3/","text":"\u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 # On importe les modules # dont on a besoin from machine import * import utime # On d\u00e9clare une LED sur la broche P0 p0 = Pin ( 3 , Pin . OUT ) p0 . on () utime . sleep ( 5 ) p0 . on () utime . sleep_ms ( 5000 ) p0 . off ()","title":"Quiz1 question3"},{"location":"quiz/quiz1-question3/#_1","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 # On importe les modules # dont on a besoin from machine import * import utime # On d\u00e9clare une LED sur la broche P0 p0 = Pin ( 3 , Pin . OUT ) p0 . on () utime . sleep ( 5 ) p0 . on () utime . sleep_ms ( 5000 ) p0 . off ()","title":""},{"location":"quiz/quiz1-question4/","text":"\u00b6 Exemple avec des blocs Exemple avec du code 1 print ( 'Hello world!' )","title":"Quiz1 question4"},{"location":"quiz/quiz1-question4/#_1","text":"Exemple avec des blocs Exemple avec du code 1 print ( 'Hello world!' )","title":""},{"location":"quiz/quiz2-question1/","text":"\u00b6 Exemple avec des blocs Exemple avec du code 1 2 for i in range ( 0 , 9 , 2 ): print ( 'Tchou' )","title":"Quiz2 question1"},{"location":"quiz/quiz2-question1/#_1","text":"Exemple avec des blocs Exemple avec du code 1 2 for i in range ( 0 , 9 , 2 ): print ( 'Tchou' )","title":""},{"location":"quiz/quiz2-question3/","text":"\u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 from thingz import * led . set_colors ( 0 , 0 , 100 ) if button_a . is_pressed (): led . set_colors ( 100 , 0 , 0 ) while True : if button_b . is_pressed (): led . set_colors ( 0 , 100 , 0 )","title":"Quiz2 question3"},{"location":"quiz/quiz2-question3/#_1","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 from thingz import * led . set_colors ( 0 , 0 , 100 ) if button_a . is_pressed (): led . set_colors ( 100 , 0 , 0 ) while True : if button_b . is_pressed (): led . set_colors ( 0 , 100 , 0 )","title":""},{"location":"quiz/quiz2-question4/","text":"\u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from machine import * from thingz import * import utime # Initialisation d'un servomoteur sur la broche P19 p19 = PWM ( Pin ( 13 ), freq = 50 , duty = 205 ) def setServoAngle ( pin , angle ): if ( angle >= 0 and angle <= 180 ): pin . duty ( int ( 0.025 * 1023 + ( angle * 0.1 * 1023 ) / 180 )) else : raise ValueError ( \"Servomotor angle have to be set between 0 and 180\" ) angle_servo = 0 duree = 0 while True : angle_servo = angle_servo + 1 for i in range ( 181 ): setServoAngle ( p19 , i ) utime . sleep_ms ( 10 ) duree = duree + 10 utime . sleep_ms ( 10 )","title":"Quiz2 question4"},{"location":"quiz/quiz2-question4/#_1","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from machine import * from thingz import * import utime # Initialisation d'un servomoteur sur la broche P19 p19 = PWM ( Pin ( 13 ), freq = 50 , duty = 205 ) def setServoAngle ( pin , angle ): if ( angle >= 0 and angle <= 180 ): pin . duty ( int ( 0.025 * 1023 + ( angle * 0.1 * 1023 ) / 180 )) else : raise ValueError ( \"Servomotor angle have to be set between 0 and 180\" ) angle_servo = 0 duree = 0 while True : angle_servo = angle_servo + 1 for i in range ( 181 ): setServoAngle ( p19 , i ) utime . sleep_ms ( 10 ) duree = duree + 10 utime . sleep_ms ( 10 )","title":""},{"location":"thingz/thingz/","text":"Thingz \u00b6 La Carte galaxia a \u00e9t\u00e9 con\u00e7u par Thingz , une entreprise constitu\u00e9e de plein de gens sympathiques ! Pour r\u00e9aliser cette carte, ils ont assembl\u00e9 plusieurs composants \u00e9lectroniques qui permettent d'ajouter \u00e0 la carte des capacit\u00e9s, comme capter la luminosit\u00e9, le magn\u00e9tisme, l'acc\u00e9l\u00e9ration, de jouer du son, etc. Pour qu'on puisse utiliser ces fonctionnalit\u00e9s, il a fallu que Thingz cr\u00e9\u00e9 un code qui traduit une utilisation simple en un code compr\u00e9hensible par chacun des composants. Ils ont regroup\u00e9 tout ce code dans une biblioth\u00e8que (\u00e9galement appel\u00e9 librairie ou module) et l'ont appel\u00e9 thingz (pour qu'on se le rappelle). D\u00e8s lors, si vous importez la biblioth\u00e8que thingz au d\u00e9but de votre programme alors vous pourrez appeler une fonction simple d'un composant. 1 2 # Ici, j'importe toute la biblioth\u00e8que. import thingz Ou 1 2 3 # J'importe tous les modules depuis le module thingz # * est un joker qui signifie \"tout\" from thingz import * On peut maintenant se demander quelles sont les fonctions simples issues de la librairie thingz ? Si je demande \u00e0 python de me dire ce \u00e0 quoi j'ai acc\u00e8s dans cette biblioth\u00e8que 1 dir () Voici ce que je peux voir dans la console : 1 ['SoftI2C', 'time_pulse_us', 'TIMER_WAKE', 'touch_e', 'ULP_WAKE', 'SoftSPI', 'DEEPSLEEP', 'PWRON_RESET', 'button_a', 'button_b', 'led', 'WDT_RESET', 'PIN_WAKE', 'UART', 'SPI', 'I2S', 'RTC', 'lightsleep', 'gc', 'ADCBlock', 'soft_reset', 'mem32', 'I2C', 'DAC', 'sound', 'radio', 'internal_temperature', 'DEEPSLEEP_RESET', 'Pin', 'SOFT_RESET', 'TOUCHPAD_WAKE', 'EXT0_WAKE', 'uos', 'disable_irq', 'HARD_RESET', 'mem16', 'unique_id', '__name__', 'freq', 'ADC', 'deepsleep', 'enable_irq', 'reset_cause', 'PWM', 'Signal', 'mem8', 'idle', 'utime', 'accelerometer', 'wake_reason', 'set_temperature_offset', 'touch_w', 'compass', 'touch_s', 'bdev', 'WDT', 'reset', 'SLEEP', 'bitstream', 'EXT1_WAKE', 'Timer', 'touch_n', 'sleep', 'screen'] Pour en savoir plus sur chacune les sous-modules de la biblioth\u00e8que thingz , jetez donc un coup \u0153il ci-dessous : thingz.accelerometer thingz.button thingz.compass thingz.led thingz.radio thingz.sound thingz.temperature","title":"thingz"},{"location":"thingz/thingz/#thingz","text":"La Carte galaxia a \u00e9t\u00e9 con\u00e7u par Thingz , une entreprise constitu\u00e9e de plein de gens sympathiques ! Pour r\u00e9aliser cette carte, ils ont assembl\u00e9 plusieurs composants \u00e9lectroniques qui permettent d'ajouter \u00e0 la carte des capacit\u00e9s, comme capter la luminosit\u00e9, le magn\u00e9tisme, l'acc\u00e9l\u00e9ration, de jouer du son, etc. Pour qu'on puisse utiliser ces fonctionnalit\u00e9s, il a fallu que Thingz cr\u00e9\u00e9 un code qui traduit une utilisation simple en un code compr\u00e9hensible par chacun des composants. Ils ont regroup\u00e9 tout ce code dans une biblioth\u00e8que (\u00e9galement appel\u00e9 librairie ou module) et l'ont appel\u00e9 thingz (pour qu'on se le rappelle). D\u00e8s lors, si vous importez la biblioth\u00e8que thingz au d\u00e9but de votre programme alors vous pourrez appeler une fonction simple d'un composant. 1 2 # Ici, j'importe toute la biblioth\u00e8que. import thingz Ou 1 2 3 # J'importe tous les modules depuis le module thingz # * est un joker qui signifie \"tout\" from thingz import * On peut maintenant se demander quelles sont les fonctions simples issues de la librairie thingz ? Si je demande \u00e0 python de me dire ce \u00e0 quoi j'ai acc\u00e8s dans cette biblioth\u00e8que 1 dir () Voici ce que je peux voir dans la console : 1 ['SoftI2C', 'time_pulse_us', 'TIMER_WAKE', 'touch_e', 'ULP_WAKE', 'SoftSPI', 'DEEPSLEEP', 'PWRON_RESET', 'button_a', 'button_b', 'led', 'WDT_RESET', 'PIN_WAKE', 'UART', 'SPI', 'I2S', 'RTC', 'lightsleep', 'gc', 'ADCBlock', 'soft_reset', 'mem32', 'I2C', 'DAC', 'sound', 'radio', 'internal_temperature', 'DEEPSLEEP_RESET', 'Pin', 'SOFT_RESET', 'TOUCHPAD_WAKE', 'EXT0_WAKE', 'uos', 'disable_irq', 'HARD_RESET', 'mem16', 'unique_id', '__name__', 'freq', 'ADC', 'deepsleep', 'enable_irq', 'reset_cause', 'PWM', 'Signal', 'mem8', 'idle', 'utime', 'accelerometer', 'wake_reason', 'set_temperature_offset', 'touch_w', 'compass', 'touch_s', 'bdev', 'WDT', 'reset', 'SLEEP', 'bitstream', 'EXT1_WAKE', 'Timer', 'touch_n', 'sleep', 'screen'] Pour en savoir plus sur chacune les sous-modules de la biblioth\u00e8que thingz , jetez donc un coup \u0153il ci-dessous : thingz.accelerometer thingz.button thingz.compass thingz.led thingz.radio thingz.sound thingz.temperature","title":"Thingz"},{"location":"thingz/thingz_accelerometer/","text":"thingz.accelerometer \u00b6 get_gestures() : \u00b6 Cette fonction retourne une cha\u00eene de caract\u00e8res qui indique le type de geste ou de mouvement d\u00e9tect\u00e9 \"tap\" : D\u00e9tection d'un tap ou d'un double tap sur la carte Galaxia. \"shake\" : D\u00e9tection d'un mouvement de secousse de la carte Galaxia. \"up\" : D\u00e9tection d'un mouvement ascendant de la carte Galaxia. \"down\" : D\u00e9tection d'un mouvement descendant de la carte Galaxia. \"left\" : D\u00e9tection d'un mouvement vers la gauche de la carte Galaxia. \"right\" : D\u00e9tection d'un mouvement vers la droite de la carte Galaxia. \"face up\" : D\u00e9tection si l'\u00e9cran est vers le haut \"face down\" : D\u00e9tection si l'\u00e9cran est vers le bas \"free fall\" : D\u00e9tection d'un mouvement de chute libre \"3g\" \"6g\" \"8g\" \"none\" Exemple de code utilisant la fonction get_gestures() pour d\u00e9tecter les mouvements de secousse de la carte Galaxia : 1 2 3 4 5 6 7 from machine import * from thingz import * while True : gesture = accelerometer . current_gesture () if gesture == \"shake\" : print ( \"shake!\" ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ## testing from machine import * from thingz import * while True : gesture = accelerometer . current_gesture () if gesture == \"shake\" : print ( \"shake!\" ); if gesture == \"tap\" : print ( \"tap d\u00e9tect\u00e9 !\" ); if gesture == \"up\" : print ( \"up !\" ); if gesture == \"down ! \" : print ( \"down !\" ); if gesture == \"6g\" : print ( \"6g !\" ); if gesture == \"left\" : print ( \"left !\" ); get_x() \u00b6 Renvoie un float repr\u00e9sentant la valeur de l\u2019acc\u00e9l\u00e9ration sur l\u2019axe x en mG. 1 2 3 4 from thingz import * while True : print ( str ( accelerometer . get_x ())); get_y() \u00b6 Renvoie un r\u00e9el float repr\u00e9sentant la valeur de l\u2019acc\u00e9l\u00e9ration sur l\u2019axe y en mG get_z() \u00b6 Renvoie un r\u00e9el float repr\u00e9sentant la valeur de l\u2019acc\u00e9l\u00e9ration sur l\u2019axe z en mG get_values() \u00b6 Renvoie une list pour les valeurs d\u2019acc\u00e9l\u00e9ration sur les 3 axes. L\u2019index 0 correspond \u00e0 l\u2019axe X,1 pour Y et 2 pour Z is_gesture(_gesture: str ) \u00b6 Cette fonction prend en parametre Le geste \u00e0 tester et renvoie un booleen ( True si le geste courant est celui \u00e0 tester ) was_gesture(gesture: str ) \u00b6 Cette fonction prend en parametre Le geste \u00e0 tester et renvoie un booleen (True si le geste a \u00e9t\u00e9 actif depuis le dernier appel \u00e0 cette fonction ) get_gestures() \u00b6 Renvoie une liste de l\u2019historique des gestes. Le plus r\u00e9cent est \u00e0 la fin de la liste.","title":"thingz.accelerometer"},{"location":"thingz/thingz_accelerometer/#thingzaccelerometer","text":"","title":"thingz.accelerometer"},{"location":"thingz/thingz_accelerometer/#get_gestures","text":"Cette fonction retourne une cha\u00eene de caract\u00e8res qui indique le type de geste ou de mouvement d\u00e9tect\u00e9 \"tap\" : D\u00e9tection d'un tap ou d'un double tap sur la carte Galaxia. \"shake\" : D\u00e9tection d'un mouvement de secousse de la carte Galaxia. \"up\" : D\u00e9tection d'un mouvement ascendant de la carte Galaxia. \"down\" : D\u00e9tection d'un mouvement descendant de la carte Galaxia. \"left\" : D\u00e9tection d'un mouvement vers la gauche de la carte Galaxia. \"right\" : D\u00e9tection d'un mouvement vers la droite de la carte Galaxia. \"face up\" : D\u00e9tection si l'\u00e9cran est vers le haut \"face down\" : D\u00e9tection si l'\u00e9cran est vers le bas \"free fall\" : D\u00e9tection d'un mouvement de chute libre \"3g\" \"6g\" \"8g\" \"none\" Exemple de code utilisant la fonction get_gestures() pour d\u00e9tecter les mouvements de secousse de la carte Galaxia : 1 2 3 4 5 6 7 from machine import * from thingz import * while True : gesture = accelerometer . current_gesture () if gesture == \"shake\" : print ( \"shake!\" ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ## testing from machine import * from thingz import * while True : gesture = accelerometer . current_gesture () if gesture == \"shake\" : print ( \"shake!\" ); if gesture == \"tap\" : print ( \"tap d\u00e9tect\u00e9 !\" ); if gesture == \"up\" : print ( \"up !\" ); if gesture == \"down ! \" : print ( \"down !\" ); if gesture == \"6g\" : print ( \"6g !\" ); if gesture == \"left\" : print ( \"left !\" );","title":"get_gestures() :"},{"location":"thingz/thingz_accelerometer/#get_x","text":"Renvoie un float repr\u00e9sentant la valeur de l\u2019acc\u00e9l\u00e9ration sur l\u2019axe x en mG. 1 2 3 4 from thingz import * while True : print ( str ( accelerometer . get_x ()));","title":"get_x()"},{"location":"thingz/thingz_accelerometer/#get_y","text":"Renvoie un r\u00e9el float repr\u00e9sentant la valeur de l\u2019acc\u00e9l\u00e9ration sur l\u2019axe y en mG","title":"get_y()"},{"location":"thingz/thingz_accelerometer/#get_z","text":"Renvoie un r\u00e9el float repr\u00e9sentant la valeur de l\u2019acc\u00e9l\u00e9ration sur l\u2019axe z en mG","title":"get_z()"},{"location":"thingz/thingz_accelerometer/#get_values","text":"Renvoie une list pour les valeurs d\u2019acc\u00e9l\u00e9ration sur les 3 axes. L\u2019index 0 correspond \u00e0 l\u2019axe X,1 pour Y et 2 pour Z","title":"get_values()"},{"location":"thingz/thingz_accelerometer/#is_gesture_gesture-str","text":"Cette fonction prend en parametre Le geste \u00e0 tester et renvoie un booleen ( True si le geste courant est celui \u00e0 tester )","title":"is_gesture(_gesture:\u00a0str )"},{"location":"thingz/thingz_accelerometer/#was_gesturegesture-str","text":"Cette fonction prend en parametre Le geste \u00e0 tester et renvoie un booleen (True si le geste a \u00e9t\u00e9 actif depuis le dernier appel \u00e0 cette fonction )","title":"was_gesture(gesture:\u00a0str )"},{"location":"thingz/thingz_accelerometer/#get_gestures_1","text":"Renvoie une liste de l\u2019historique des gestes. Le plus r\u00e9cent est \u00e0 la fin de la liste.","title":"get_gestures()"},{"location":"thingz/thingz_button/","text":"thingz.button \u00b6 thingz.ButtonTouch \u00b6 Contr\u00f4ler les boutons physiques de la Galaxia \u00b6 les boutons A et B \u00b6 Utilisent la class button Sont accessibles par leurs noms thingz.button_a thingz.button_b les boutons n, s, e, w \u00b6 Utilisent la class buttonTouch Sont accessibles par leurs noms thingz.touch_n:ButtonTouch thingz.touch_s:ButtonTouch thingz.touch_e:ButtonTouch thingz.touch_w:ButtonTouch Cependant les fonctions ont les m\u00eames noms is_pressed() \u00b6 Renvoie un bool\u00e9en bool True si le bouton est press\u00e9, sinon False was_pressed() \u00b6 Renvoie un bool\u00e9en bool True si le bouton a \u00e9t\u00e9 appuy\u00e9 depuis le dernier appel \u00e0 cette fonction, sinon False get_presses() \u00b6 Renvoie un entier int repr\u00e9sentant le nombre d\u2019appuis depuis le dernier appel. on_pressed( callback: Callable ) \u00b6 Enregistre une fonction de callback associ\u00e9e \u00e0 l\u2019\u00e9venement appui elle prend le nom de la La fonction \u00e0 appeler lors de l\u2019appui. Le bouton concern\u00e9 est pass\u00e9 en param\u00e8tre de la fonction de callback","title":"thingz.button"},{"location":"thingz/thingz_button/#thingzbutton","text":"","title":"thingz.button"},{"location":"thingz/thingz_button/#thingzbuttontouch","text":"","title":"thingz.ButtonTouch"},{"location":"thingz/thingz_button/#controler-les-boutons-physiques-de-la-galaxia","text":"","title":"Contr\u00f4ler les boutons physiques de la Galaxia"},{"location":"thingz/thingz_button/#les-boutons-a-et-b","text":"Utilisent la class button Sont accessibles par leurs noms thingz.button_a thingz.button_b","title":"les boutons A et B"},{"location":"thingz/thingz_button/#les-boutons-n-s-e-w","text":"Utilisent la class buttonTouch Sont accessibles par leurs noms thingz.touch_n:ButtonTouch thingz.touch_s:ButtonTouch thingz.touch_e:ButtonTouch thingz.touch_w:ButtonTouch Cependant les fonctions ont les m\u00eames noms","title":"les boutons n, s, e, w"},{"location":"thingz/thingz_button/#is_pressed","text":"Renvoie un bool\u00e9en bool True si le bouton est press\u00e9, sinon False","title":"is_pressed()"},{"location":"thingz/thingz_button/#was_pressed","text":"Renvoie un bool\u00e9en bool True si le bouton a \u00e9t\u00e9 appuy\u00e9 depuis le dernier appel \u00e0 cette fonction, sinon False","title":"was_pressed()"},{"location":"thingz/thingz_button/#get_presses","text":"Renvoie un entier int repr\u00e9sentant le nombre d\u2019appuis depuis le dernier appel.","title":"get_presses()"},{"location":"thingz/thingz_button/#on_pressedcallback-callable","text":"Enregistre une fonction de callback associ\u00e9e \u00e0 l\u2019\u00e9venement appui elle prend le nom de la La fonction \u00e0 appeler lors de l\u2019appui. Le bouton concern\u00e9 est pass\u00e9 en param\u00e8tre de la fonction de callback","title":"on_pressed(callback:\u00a0Callable)"},{"location":"thingz/thingz_compass/","text":"thingz.compass \u00b6 get_x() \u00b6 Renvoie un float pour la valeur du champ magn\u00e9tique sur l\u2019axe x en uT get_y() \u00b6 Renvoie un float pour la valeur du champ magn\u00e9tique sur l\u2019axe y en uT get_z() \u00b6 Renvoie un float pour la valeur du champ magn\u00e9tique sur l\u2019axe z en uT get_values() \u00b6 Renvoie une liste pour les valeurs du champs magn\u00e9tique sur les 3 axes L\u2019index 0 correspond \u00e0 l\u2019axe X,1 pour Y et 2 pour Z heading() \u00b6 Renvoie un float repr\u00e9sentant le cap courant de 0\u00b0 a 360\u00b0 1 2 3 4 from thingz import * while True : print ( str ( compass . heading ())); calibrate( hard_time: int , soft_time: int ) \u00b6 Calibrer le magn\u00e9tom\u00e8tre. Pendant la calibration il est n\u00e9cessaire de faire pivoter la carte dans toutes les directions. La calibration peut durer une minutes et ne communique pas les param\u00e8tres: hard_time ( int ) \u2013 Temps \u00e0 passer dans la premi\u00e8re \u00e9tape de calibration (en secondes). Valeur recommand\u00e9e 5 soft_time ( int ) \u2013 Temps \u00e0 passer dans la deuxi\u00e8me \u00e9tape de calibration (en secondes). Valeur recommand\u00e9e 5","title":"thingz.compas"},{"location":"thingz/thingz_compass/#thingzcompass","text":"","title":"thingz.compass"},{"location":"thingz/thingz_compass/#get_x","text":"Renvoie un float pour la valeur du champ magn\u00e9tique sur l\u2019axe x en uT","title":"get_x()"},{"location":"thingz/thingz_compass/#get_y","text":"Renvoie un float pour la valeur du champ magn\u00e9tique sur l\u2019axe y en uT","title":"get_y()"},{"location":"thingz/thingz_compass/#get_z","text":"Renvoie un float pour la valeur du champ magn\u00e9tique sur l\u2019axe z en uT","title":"get_z()"},{"location":"thingz/thingz_compass/#get_values","text":"Renvoie une liste pour les valeurs du champs magn\u00e9tique sur les 3 axes L\u2019index 0 correspond \u00e0 l\u2019axe X,1 pour Y et 2 pour Z","title":"get_values()"},{"location":"thingz/thingz_compass/#heading","text":"Renvoie un float repr\u00e9sentant le cap courant de 0\u00b0 a 360\u00b0 1 2 3 4 from thingz import * while True : print ( str ( compass . heading ()));","title":"heading()"},{"location":"thingz/thingz_compass/#calibratehard_time-int-soft_time-int","text":"Calibrer le magn\u00e9tom\u00e8tre. Pendant la calibration il est n\u00e9cessaire de faire pivoter la carte dans toutes les directions. La calibration peut durer une minutes et ne communique pas les param\u00e8tres: hard_time ( int ) \u2013 Temps \u00e0 passer dans la premi\u00e8re \u00e9tape de calibration (en secondes). Valeur recommand\u00e9e 5 soft_time ( int ) \u2013 Temps \u00e0 passer dans la deuxi\u00e8me \u00e9tape de calibration (en secondes). Valeur recommand\u00e9e 5","title":"calibrate(hard_time:\u00a0int,\u00a0soft_time:\u00a0int)"},{"location":"thingz/thingz_led/","text":"Thingz.Led \u00b6 Contr\u00f4ler la LED RGB de la Galaxia set_colors(red: int, green: int, blue: int) \u00b6 R\u00e9gler l'intensit\u00e9 lumineuse du rouge, du vert et du bleu de la LED Param\u00e8tres: red (int) \u2013 La valeur rouge, comprise entre 0 et 255 green (int) \u2013 La valeur verte, comprise entre 0 et 255 blue (int) \u2013 La valeur bleue, comprise entre 0 et 255 1 2 3 4 from thingz import * while True : led . set_colors ( 100 , 100 , 0 ) set_red(red: int) \u00b6 R\u00e9gle l'intensit\u00e9 de la couleur rouge, prend comme param\u00e8tres un entier int compris entre 0 et 255 set_green(green: int) \u00b6 R\u00e9gle l'intensit\u00e9 de la couleur verte, prend comme param\u00e8tres un entier int compris entre 0 et 255 set_blue(blue: int) \u00b6 R\u00e9gle l'intensit\u00e9 de la couleur bleue, prend comme param\u00e8tres un entier int compris entre 0 et 255 get_red()\u2192 int \u00b6 Renvoie un entier int La valeur de l'intensit\u00e9 du bleue courante, comprise entre 0 et 255 get_green()\u2192 int \u00b6 Renvoie un entier int La valeur de l'intensit\u00e9 du verte courante, comprise entre 0 et 255 get_blue()\u2192 int \u00b6 Renvoie un entier int La valeur de l'intensit\u00e9 du bleue courante, comprise entre 0 et 255 read_light_level() \u00b6 Renvoie un entier int entre 0 (nuit) et 255 (lumi\u00e8re vive) qui repr\u00e9sente la luminosit\u00e9 ambiante courante","title":"thingz.led"},{"location":"thingz/thingz_led/#thingzled","text":"Contr\u00f4ler la LED RGB de la Galaxia","title":"Thingz.Led"},{"location":"thingz/thingz_led/#set_colorsred-int-green-int-blue-int","text":"R\u00e9gler l'intensit\u00e9 lumineuse du rouge, du vert et du bleu de la LED Param\u00e8tres: red (int) \u2013 La valeur rouge, comprise entre 0 et 255 green (int) \u2013 La valeur verte, comprise entre 0 et 255 blue (int) \u2013 La valeur bleue, comprise entre 0 et 255 1 2 3 4 from thingz import * while True : led . set_colors ( 100 , 100 , 0 )","title":"set_colors(red: int, green: int, blue: int)"},{"location":"thingz/thingz_led/#set_redred-int","text":"R\u00e9gle l'intensit\u00e9 de la couleur rouge, prend comme param\u00e8tres un entier int compris entre 0 et 255","title":"set_red(red: int)"},{"location":"thingz/thingz_led/#set_greengreen-int","text":"R\u00e9gle l'intensit\u00e9 de la couleur verte, prend comme param\u00e8tres un entier int compris entre 0 et 255","title":"set_green(green: int)"},{"location":"thingz/thingz_led/#set_blueblue-int","text":"R\u00e9gle l'intensit\u00e9 de la couleur bleue, prend comme param\u00e8tres un entier int compris entre 0 et 255","title":"set_blue(blue: int)"},{"location":"thingz/thingz_led/#get_red-int","text":"Renvoie un entier int La valeur de l'intensit\u00e9 du bleue courante, comprise entre 0 et 255","title":"get_red()\u2192 int"},{"location":"thingz/thingz_led/#get_green-int","text":"Renvoie un entier int La valeur de l'intensit\u00e9 du verte courante, comprise entre 0 et 255","title":"get_green()\u2192 int"},{"location":"thingz/thingz_led/#get_blue-int","text":"Renvoie un entier int La valeur de l'intensit\u00e9 du bleue courante, comprise entre 0 et 255","title":"get_blue()\u2192 int"},{"location":"thingz/thingz_led/#read_light_level","text":"Renvoie un entier int entre 0 (nuit) et 255 (lumi\u00e8re vive) qui repr\u00e9sente la luminosit\u00e9 ambiante courante","title":"read_light_level()"},{"location":"thingz/thingz_radio/","text":"Thingz.radio \u00b6 Envoyer et recevoir des donn\u00e9es entre Galaxias send(data: str) \u00b6 Envoie un message. Le message sera diffus\u00e9 sur le canal actuellement param\u00e9tr\u00e9. Toutes les Galaxias \u00e9coutant le m\u00eame canal Param\u00e8tres: data (str) \u2013 donn\u00e9es sous la forme d'une chaine de caract\u00e8re str receive() \u00b6 Attend de recevoir les donn\u00e9es \u00e0 recevoir Renvoie une chaine de caract\u00e8re str , La donn\u00e9es re\u00e7ue set_chanel(channel: int) \u00b6 Configurer le canal utilis\u00e9 par la Galaxia Param\u00e8tres: channel (int) \u2013 Le canal un entier int entre 1 et 10 get_channel() \u00b6 R\u00e9cup\u00e9re le canal utilis\u00e9 par la Galaxia Renvoie dans un entier int le canal utilis\u00e9 par la Galaxia","title":"thingz.radio"},{"location":"thingz/thingz_radio/#thingzradio","text":"Envoyer et recevoir des donn\u00e9es entre Galaxias","title":"Thingz.radio"},{"location":"thingz/thingz_radio/#senddata-str","text":"Envoie un message. Le message sera diffus\u00e9 sur le canal actuellement param\u00e9tr\u00e9. Toutes les Galaxias \u00e9coutant le m\u00eame canal Param\u00e8tres: data (str) \u2013 donn\u00e9es sous la forme d'une chaine de caract\u00e8re str","title":"send(data: str)"},{"location":"thingz/thingz_radio/#receive","text":"Attend de recevoir les donn\u00e9es \u00e0 recevoir Renvoie une chaine de caract\u00e8re str , La donn\u00e9es re\u00e7ue","title":"receive()"},{"location":"thingz/thingz_radio/#set_chanelchannel-int","text":"Configurer le canal utilis\u00e9 par la Galaxia Param\u00e8tres: channel (int) \u2013 Le canal un entier int entre 1 et 10","title":"set_chanel(channel: int)"},{"location":"thingz/thingz_radio/#get_channel","text":"R\u00e9cup\u00e9re le canal utilis\u00e9 par la Galaxia Renvoie dans un entier int le canal utilis\u00e9 par la Galaxia","title":"get_channel()"},{"location":"thingz/thingz_sound/","text":"thingz.Sound \u00b6 G\u00e9nerer des sons sur le connecteur jack de la Galaxia play(on: bool, freq: int) \u00b6 Param\u00e8tres: la valeur bool\u00e9enne bool indiquera la g\u00e9n\u00e9ration ou l'arr\u00e9t de la fr\u00e9quence indiqu\u00e9 dans un entier int freq (int) \u2013 La fr\u00e9quence \u00e0 g\u00e9n\u00e9rer (en Hz) set_frequency(freq: int) \u00b6 R\u00e9gler la frequence (en Hz) du g\u00e9n\u00e9rateur, indiqu\u00e9e dans un entier * int set_volume(volume: int) \u00b6 R\u00e9gler le volume du son indiqu\u00e9 dans un entier int entre 0 et 100 S play_sample(filename: str) \u00b6 Jouer un extrait sonore. L\u2019extrait doit \u00eatre au format wav Param\u00e8tres: filename (str) \u2013 Le chemin vers l\u2019extrait. Il doit \u00eatre sauvegard\u00e9 dans le stockage usb de la Galaxia","title":"thingz.sound"},{"location":"thingz/thingz_sound/#thingzsound","text":"G\u00e9nerer des sons sur le connecteur jack de la Galaxia","title":"thingz.Sound"},{"location":"thingz/thingz_sound/#playon-bool-freq-int","text":"Param\u00e8tres: la valeur bool\u00e9enne bool indiquera la g\u00e9n\u00e9ration ou l'arr\u00e9t de la fr\u00e9quence indiqu\u00e9 dans un entier int freq (int) \u2013 La fr\u00e9quence \u00e0 g\u00e9n\u00e9rer (en Hz)","title":"play(on: bool, freq: int)"},{"location":"thingz/thingz_sound/#set_frequencyfreq-int","text":"R\u00e9gler la frequence (en Hz) du g\u00e9n\u00e9rateur, indiqu\u00e9e dans un entier * int","title":"set_frequency(freq: int)"},{"location":"thingz/thingz_sound/#set_volumevolume-int","text":"R\u00e9gler le volume du son indiqu\u00e9 dans un entier int entre 0 et 100 S","title":"set_volume(volume: int)"},{"location":"thingz/thingz_sound/#play_samplefilename-str","text":"Jouer un extrait sonore. L\u2019extrait doit \u00eatre au format wav Param\u00e8tres: filename (str) \u2013 Le chemin vers l\u2019extrait. Il doit \u00eatre sauvegard\u00e9 dans le stockage usb de la Galaxia","title":"play_sample(filename: str)"},{"location":"thingz/thingz_temperature/","text":"thingz.temperature \u00b6 temperature() \u00b6 Renvoie un int repr\u00e9sentant la temp\u00e9rature courante courante en utilisant le capteur interne du microcontr\u00f4leur set_temperature_offset(offset: int) \u00b6 Calibrer le capteur de temp\u00e9rature interne du microcontr\u00f4leur en appliquant un offset, un entier int","title":"thingz.temperature"},{"location":"thingz/thingz_temperature/#thingztemperature","text":"","title":"thingz.temperature"},{"location":"thingz/thingz_temperature/#temperature","text":"Renvoie un int repr\u00e9sentant la temp\u00e9rature courante courante en utilisant le capteur interne du microcontr\u00f4leur","title":"temperature()"},{"location":"thingz/thingz_temperature/#set_temperature_offsetoffset-int","text":"Calibrer le capteur de temp\u00e9rature interne du microcontr\u00f4leur en appliquant un offset, un entier int","title":"set_temperature_offset(offset: int)"},{"location":"variables/variable_nombre/","text":"Utiliser une variable pour y stocker des nombres \u00b6 Une variable est un espace m\u00e9moire dans lequel il est possible de mettre une valeur. Par exemple, pour stocker un nombre dans une variable et modifier sa valeur, je peux utiliser les instructions suivantes : Exemple \u00b6 Exemple avec des blocs Exemple avec du code Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte . Les blocs permettant de manipuler les nombre \u00eatre trouv\u00e9s dans la cat\u00e9gorie de blocs Op\u00e9rateurs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # On affecte un nombre a une variable de la fa\u00e7on suivante : personnes_presentes = 1 # On affiche la valeur de la variable pr\u00e9c\u00e9d\u00e9 par du texte print ( \"Nombre de personnes pr\u00e9sentes : \" + personnes_presentes ) print ( 'Une personne entre !' ) # On incr\u00e9mente la variable de 1 personnes_presentes = personnes_presentes + 1 print ( \"Nombre de personnes pr\u00e9sentes : \" + personnes_presentes ) print ( 'Trois personnes entrent !' ); # on incr\u00e9mente la variable de 3 personnes_presentes = personnes_presentes + 3 print ( \"Nombre de personnes pr\u00e9sentes : \" + personnes_presentes ) print ( 'Une personne sort !' ) personnes_presentes = personnes_presentes - 1 print ( \"Nombre de personnes pr\u00e9sentes : \" + personnes_presentes ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Stocker des nombres"},{"location":"variables/variable_nombre/#utiliser-une-variable-pour-y-stocker-des-nombres","text":"Une variable est un espace m\u00e9moire dans lequel il est possible de mettre une valeur. Par exemple, pour stocker un nombre dans une variable et modifier sa valeur, je peux utiliser les instructions suivantes :","title":"Utiliser une variable pour y stocker des nombres"},{"location":"variables/variable_nombre/#exemple","text":"Exemple avec des blocs Exemple avec du code Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte . Les blocs permettant de manipuler les nombre \u00eatre trouv\u00e9s dans la cat\u00e9gorie de blocs Op\u00e9rateurs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # On affecte un nombre a une variable de la fa\u00e7on suivante : personnes_presentes = 1 # On affiche la valeur de la variable pr\u00e9c\u00e9d\u00e9 par du texte print ( \"Nombre de personnes pr\u00e9sentes : \" + personnes_presentes ) print ( 'Une personne entre !' ) # On incr\u00e9mente la variable de 1 personnes_presentes = personnes_presentes + 1 print ( \"Nombre de personnes pr\u00e9sentes : \" + personnes_presentes ) print ( 'Trois personnes entrent !' ); # on incr\u00e9mente la variable de 3 personnes_presentes = personnes_presentes + 3 print ( \"Nombre de personnes pr\u00e9sentes : \" + personnes_presentes ) print ( 'Une personne sort !' ) personnes_presentes = personnes_presentes - 1 print ( \"Nombre de personnes pr\u00e9sentes : \" + personnes_presentes )","title":"Exemple"},{"location":"variables/variable_nombre/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Aller plus loin"},{"location":"variables/variable_texte/","text":"Utiliser une variable pour y stocker du texte \u00b6 Une variable est un espace m\u00e9moire dans lequel il est possible de mettre une valeur. Par exemple, pour stocker un pr\u00e9nom (qui est un texte) dans une variable, je peux utiliser les instructions suivantes : Exemple \u00b6 Exemple avec des blocs Exemple avec du code Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte . 1 2 3 4 5 # prenom est le nom de ma variable # \"Baptiste\" est une cha\u00eene de caract\u00e8res, notez bien les guillemets # le signe '=' va stocker la cha\u00eene de caract\u00e8res dans la variable prenom prenom = \"Baptiste\" print ( \"Salut \" , prenom , \" !\" ); Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Stocker du texte"},{"location":"variables/variable_texte/#utiliser-une-variable-pour-y-stocker-du-texte","text":"Une variable est un espace m\u00e9moire dans lequel il est possible de mettre une valeur. Par exemple, pour stocker un pr\u00e9nom (qui est un texte) dans une variable, je peux utiliser les instructions suivantes :","title":"Utiliser une variable pour y stocker du texte"},{"location":"variables/variable_texte/#exemple","text":"Exemple avec des blocs Exemple avec du code Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte . 1 2 3 4 5 # prenom est le nom de ma variable # \"Baptiste\" est une cha\u00eene de caract\u00e8res, notez bien les guillemets # le signe '=' va stocker la cha\u00eene de caract\u00e8res dans la variable prenom prenom = \"Baptiste\" print ( \"Salut \" , prenom , \" !\" );","title":"Exemple"},{"location":"variables/variable_texte/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Aller plus loin"}]}