{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":"<p>Vous suivez les cours en ligne de l'IMT sur  MicroPython et vous cherchez de l'aide ? Vous \u00eates au bon endroit !</p>"},{"location":"#vos-outils","title":"Vos outils","text":"<ul> <li>L'interface Vittascience : D\u00e9buter avec l'interface de d\u00e9veloppement d\u00e9velopp\u00e9e par notre partenaire Vittascience</li> <li>Carte Galaxia : Tout savoir sur la carte \u00e9lectronique d\u00e9velopp\u00e9e par notre partenaire Thingz</li> </ul>"},{"location":"#guides-de-reference","title":"Guides de r\u00e9f\u00e9rence","text":"<p>Vous trouverez dans les cat\u00e9gories suivantes des exemples et des ressources p\u00e9dagogiques consacr\u00e9es au langage MicroPython :</p> Exemples issus du langage Python Exemples sp\u00e9cifiques \u00e0  MicroPython  Logique  Affichage  Boucles  Entr\u00e9es/Sorties  Math  Communication  Texte  Capteurs  Variables  Actionneurs  Listes  Fonctions"},{"location":"algorithmes/","title":"Les algorithmes","text":"<p>Vous avez peut-\u00eatre d\u00e9j\u00e0 entendu le mot \u00ab algorithme \u00bb et c'est bien normal car les algos (contraction du mot algorithme) sont utilis\u00e9s quotiennement dans de nombreux ordinateurs qui nous entourent.</p> <p>Ces ordinateurs fonctionnent un peu comme nous :</p> Nos composants  Les composants d'un ordinateur  \u00c7a permet de :material-question_mark: Nos yeux Une webcam Voir Nos oreilles Un microphone Entendre Nos doigts Un capteur de temp\u00e9rature Sentir la temp\u00e9rature <ul> <li>Ils peuvent percevoir leur environnement gr\u00e2ces \u00e0 des entr\u00e9es </li> </ul> <p>Pour fonctionner, un ordinateur a besoin de savoir quoi faire et pour \u00e7a, il vient ex\u00e9cuter des algorithmes! Et oui, derri\u00e8re chaque t\u00e2che r\u00e9alis\u00e9e par l'ordinateur : un algorithme \u00e9crit par une humaine ou un humain ! Finalement, un ordinateur n'est pas si malin.</p> <p>Un algorithme pren</p>"},{"location":"galaxia/","title":"La carte Galaxia","text":"<p>La carte Galaxia est une carte \u00e9lectronique d\u00e9velopp\u00e9e par l'entreprise toulousaine Thingz. Cette carte est programmable avec le langage MicroPython et \u00e7a tombe bien puisque c'est ce langage de programmation que vous allez apprendre dans les cours en ligne de l'IMT !</p> <p>Info</p> <p> Passez votre souris et cliquez sur l'image ci-contre pour en savoir plus sur les composants de la carte Galaxia !</p> <p> </p>"},{"location":"galaxia/#les-composants-de-la-galaxia","title":"Les composants de la Galaxia","text":""},{"location":"galaxia/#le-microcontroleur-esp32-s2-wifi-et-bluetooth","title":"Le microcontr\u00f4leur ESP32-S2 (WiFi et Bluetooth)","text":"<p>C'est le cerveau de la carte. C'est lui qui va ex\u00e9cuter vos programmes d\u00e9sormais. Sa vitesse de calcul est de 240 MHz, ce qui est tr\u00e8s \u00e9lev\u00e9 pour une si petite carte programmable. </p> <p>C'est \u00e9galement ce module qui permet la communication WiFi : point d'acc\u00e8s pour la maison ou pour la classe, \u00e9changes de messages en r\u00e9seau local avec adressage IP et serveur web.</p> <p>Il a \u00e9galement une quantit\u00e9 de m\u00e9moire importante pour stocker plusieurs dizaines de programmes python en m\u00eame temps et des fichiers audio.</p>"},{"location":"galaxia/#lecran-lcd","title":"L'\u00e9cran LCD","text":"<p>Il a une taille de 1,8 pouces en diagonale et dispose d'une r\u00e9solution de 128\u00d7160 pixels et d'un r\u00e9tro\u00e9clairage \u00e0 LED blanche. Il peut afficher une grande vari\u00e9t\u00e9 de couleurs : 262 144 tonalit\u00e9s de couleurs (18 bits). Il permet d'afficher du texte, des donn\u00e9es et des \u00e9l\u00e9ments graphiques. Enfin, il permet de naviguer dans le menu Syst\u00e8me pour acc\u00e9der \u00e0 plusieurs fonctionnalit\u00e9s d\u00e9crites plus bas. </p>"},{"location":"galaxia/#une-led-rgb","title":"Une led RGB","text":"<p>Elle int\u00e8gre en fait 3 LEDs (rouge, vert et bleu) dans un seul bo\u00eetier pour vous permettre de composer les couleurs de votre choix. On parle dans ce cas de synth\u00e8se additive des couleurs (\u00e0 la diff\u00e9rence de la peinture o\u00f9 l'on combine les couleurs primaires : cyan, magenta et jaune avec une synth\u00e8se soustractive). Cette LED offre un indicateur lumineux simple \u00e0 programmer pour indiquer diff\u00e9rentes informations en fonction des couleurs choisies. Sa luminosit\u00e9 offre une capacit\u00e9 d'\u00e9clairage qui peut permettre d'\u00e9clairer un objet dans un environnement sombre.</p> <p>Pour chacune des 3 couleurs, on peut r\u00e9gler l'intensit\u00e9 lumineuse avec une valeur comprise entre 0 (absence de luminosit\u00e9) et 255 (luminosit\u00e9 maximale).</p>"},{"location":"galaxia/#un-capteur-de-lumiere","title":"Un capteur de lumi\u00e8re","text":"<p>Il est int\u00e9gr\u00e9 \u00e0 la LED et capte la luminosit\u00e9 qui lui parvient. La captation est tr\u00e8s directionnelle, cela signifie qu'il faut bien pointer la LED dans la direction de la lumi\u00e8re que l'on veut mesurer. </p> <p>Les valeurs obtenues vont de 0 \u00e0 255. En combinaison avec l\u2019\u00e9cran vous pouvez afficher un graphique pr\u00e9sentant l\u2019\u00e9volution de la luminosit\u00e9. Programmez une alarme lorsque qu\u2019un tiroir est ouvert ou ferm\u00e9, programmez une prise connect\u00e9e qui allumera votre lampe lorsque la luminosit\u00e9 baisse, et bien d\u2019autres exp\u00e9riences.</p>"},{"location":"galaxia/#la-prise-jack-audio","title":"La prise jack audio","text":"<p>Elle offre une entr\u00e9e et une sortie audio \u00e0 la Galaxia. Vous pouvez y brancher un micro pour exploiter l'entr\u00e9e audio, une enceinte pour exploiter la sortie, ou un kit main libre pour profiter des deux en m\u00eame temps.</p>"},{"location":"galaxia/#le-magnetometre","title":"Le magn\u00e9tom\u00e8tre","text":"<p>Ce capteur permet de mesurer un champ magn\u00e9tique dans un espace en 3 dimensions. L'usage qui nous int\u00e9ressera le plus souvent est la d\u00e9tection du nord magn\u00e9tique. Ainsi, vous pourrez programmer votre carte comme une boussole ou trouvez votre orientation par rapport au nord.</p>"},{"location":"galaxia/#deux-boutons-poussoirs","title":"Deux boutons poussoirs","text":"<p>Vous pouvez d\u00e9tecter s'ils ont \u00e9t\u00e9 appuy\u00e9 bri\u00e8vement ou s'ils sont maintenus appuy\u00e9s. G\u00e9n\u00e9ralement, on utilise cette d\u00e9tection d'appui pour d\u00e9clencher des actions en cons\u00e9quence. </p>"},{"location":"galaxia/#quatre-boutons-tactiles","title":"Quatre boutons tactiles","text":"<p>Leur utilisation n'est pas tr\u00e8s diff\u00e9rente de celle des boutons A et B. Ils sont dispos\u00e9s en cercle pour offrir un pad tactile qui peut \u00eatre utilis\u00e9 comme une fl\u00e8che directionnelle, ils donnent ainsi \u00e0 la Galaxia un petit air de console de jeu.</p>"},{"location":"galaxia/#le-port-micro-usb","title":"Le port micro-USB","text":"<p>Il vous sert \u00e0 alimenter votre Galaxia, \u00e0 communiquer/programmer avec l'ordinateur gr\u00e2ce au port s\u00e9rie. Une fois programm\u00e9e, on peut l'utiliser pour brancher une batterie USB et ainsi faire des objets mobiles.</p>"},{"location":"galaxia/#une-connectique-compatible-microbit","title":"Une connectique compatible micro:bit","text":"<p>Il vous permet de connecter la carte Galaxia \u00e0 des robots, comme le Maqueen ou d'autres accessoires compatibles micro:bit.</p>"},{"location":"galaxia/#brancher-la-carte-galaxia-a-un-ordinateur","title":"Brancher la carte Galaxia \u00e0 un ordinateur","text":"<p>Info</p> <p>La section qui suit est destin\u00e9e aux heureux\u00b7euses propri\u00e9taires de notre kit MOOCs MicroPython. L'achat de ce kit est optionnel et toutes les activit\u00e9s de ce MOOC peut \u00eatre simul\u00e9es avec l'interface Vittascience.</p> <p>L'interface Vittascience permet de simuler une carte \u00e9lectronique, des capteurs et des actionneurs. Et \u00e7a c'est chouette ! Mais ce qui est encore mieux, c'est de manipuler tout \u00e7a dans la vraie vie </p> <p>Pour cela, veuillez suivre les \u00e9tapes ci-dessous :</p> <ol> <li>Connectez le port micro-usb de votre Galaxia \u00e0 votre ordinateur en utilisant le c\u00e2ble micro-USB vers USB fourni dans le kit.</li> <li>Depuis le navigateur Chrome (ou Edge ou Opera), ouvrez l'interface Vittascience et ouvrez la console en bas de l'interface avec le petit bouton .</li> <li>Cliquez ensuite sur le bouton  REPL pour ouvrir la communication entre votre ordinateur et la carte Galaxia.</li> <li>Choissisez enfin le port USB sur lequel est branch\u00e9 votre Galaxia et cliquez sur Connexion</li> <li>D\u00e8s lors, vous pouvez voir les messages envoy\u00e9es depuis votre carte Galaxia (pour en savoir plus sur les messages sur le port s\u00e9rie, c'est par ici</li> <li>Vous pouvez \u00e9galement t\u00e9leverser votre code sur la carte gr\u00e2ce au bouton  T\u00e9l\u00e9verser</li> </ol>"},{"location":"interface/","title":"Interface Vittascience","text":"<p>L'interface de programmation Vittascience permet de programmer la carte \u00e9lectronique Galaxia depuis votre navigateur web en assemblant visuellement des blocs comme un puzzle. Ces blocs vont ensuite g\u00e9n\u00e9rer automatiquement un code MicroPython compr\u00e9hensible par la carte.</p> <p>Info</p> <p>Veuillez notez qu'il est \u00e9galement possible de se passer des blocs et utiliser l'interface en mode code uniquement en cliquant sur le bouton  dans la barre du haut.</p> <p></p>"},{"location":"interface/#todo-remplacer-limage-ci-dessus-par-une-video-lorsque-linterface-sera-mature","title":"TODO Remplacer l'image ci-dessus par une vid\u00e9o lorsque l'interface sera mature","text":""},{"location":"micropython/","title":"le language micropython","text":"<p>C'est le language Python dans sa version 3 mais r\u00e9duit et adapt\u00e9 pour tenir dans un microcontroleur.</p> <p>Micropython  tient dans 256Kb de Flash et 16Kb de ram  :-\u00b0</p> <p>La biblioth\u00e8que qu'on utilise avec la carte galaxia s'appelle THINGZ du nom de notre partenaire qui a construit la carte.</p> <p>Toute la documentation sp\u00e9cifique se trouve ici</p>"},{"location":"micropython/#links","title":"links","text":"<p>Site original</p> <p>http://micropython.org</p> <p>C'est ici que g\u00e9n\u00e9ralement on trouve les firmwares pour une carte donn\u00e9e</p> <p>(en anglais ;-)</p> <p>Site en fran\u00e7ais sur micropython http://micropython.fr/</p>"},{"location":"affichage/led/led/","title":"Contr\u00f4ler une LED","text":"<p>Permet de contr\u00f4ler l'\u00e9tat de la LED connect\u00e9e sur une broche de la carte \u00e9lectronique.</p>"},{"location":"affichage/led/led/#branchement","title":"Branchement","text":""},{"location":"affichage/led/led/#exemple","title":"Exemple","text":"<p>Dans l'exemple ci-dessous, nous allons allumer une LED branch\u00e9e sur la broche 2 pendant une seconde puis l'\u00e9teindre :</p>  Exemple avec des blocs Exemple avec du code <p></p> <pre><code># On importe les modules machine et utime\nfrom machine import * \nimport utime\n# D\u00e9claration d'une broche en sortie sur la broche 2\n# \u00e0 l'aide du constructeur Pin()\nled = Pin(2, Pin.OUT)\n# On allume la LED\nled.on()\n# On attend 1 seconde\nutime.sleep(1)\n# On \u00e9teint la LED\nled.off()\n</code></pre>"},{"location":"affichage/led/led/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons la classe <code>Pin</code> qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython.</p>"},{"location":"affichage/led_rgb/led_rgb/","title":"TODO : refaire cette fiche lorsque le simulateur est ok","text":"<p>Permet de r\u00e9gler l'intensit\u00e9 de la LED int\u00e9gr\u00e9e \u00e0 la carte Galaxia, de 0 \u00e0 100 pour chacune des couleurs (rouge, vert, bleu).</p>"},{"location":"affichage/led_rgb/led_rgb/#branchement","title":"Branchement","text":""},{"location":"affichage/led_rgb/led_rgb/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code <pre><code># On importe les modules machine et utime\nfrom machine import * \nimport utime\n# D\u00e9claration d'une broche en sortie sur la broche 2\n# \u00e0 l'aide du constructeur Pin()\nled = Pin(2, Pin.OUT)\n# On allume la LED\nled.on()\n# On attend 1 seconde\nutime.sleep(1)\n# On \u00e9teint la LED\nled.off()\n</code></pre>"},{"location":"affichage/led_rgb/led_rgb/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons la classe <code>Pin</code> qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la [documentation MicroPython](https://www.micropyt</p>"},{"location":"boucles/boucle_avec_variable/","title":"Boucle avec variable","text":"<p>Faire prendre \u00e0 la variable <code>i</code> les valeurs depuis le nombre de d\u00e9but jusqu\u2019au nombre de fin, en s\u2019incr\u00e9mentant du pas sp\u00e9cifi\u00e9, et ex\u00e9cuter les instructions situ\u00e9es dans la boucle.</p>"},{"location":"boucles/boucle_avec_variable/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code <p>Info</p> <p>Le bloc variable  peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs  Variables. Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che () situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable.</p> <pre><code># On importe le module utime\nimport utime\n# On utilise une boucle For pour ex\u00e9cuter \n# 10 fois les fonctions print() et sleep()\nfor i in range(10):\n# Notez que la fonction print() peut prendre plusieurs arguments\nprint(i, \" secondes \u00e9coul\u00e9es\")\nutime.sleep(1)\n</code></pre>"},{"location":"boucles/boucle_avec_variable/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython <code>print()</code> et <code>range()</code>. Pour en savoir plus sur la fonction <code>range()</code>, nous vous invitons \u00e0 lire la documentation MicroPython.</p>"},{"location":"boucles/boucle_iterative/","title":"Boucle it\u00e9rative","text":"<p>Dans le cas de processus redondants, plut\u00f4t que d'\u00e9crire le processus de multiple fois avec des param\u00e8tres diff\u00e9rents, il est pr\u00e9f\u00e9rable d'utiliser une boucle avec variable (<code>for</code> ) ainsi qu'une ou plusieurs listes ou sont stock\u00e9es toutes les variables n\u00e9cessaires. La boucle <code>for</code> se charge de la structure du processus. La(les) liste(s) s'occupe(nt) des donn\u00e9es. A chaque entr\u00e9e dans la boucle on vient chercher dans la ou les listes, les param\u00e8tres du prochain cas.</p>"},{"location":"boucles/boucle_iterative/#exemples","title":"Exemples","text":"Exemple avec des blocsExemple avec du code <p>Info</p> <p>Le bloc variable  peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs  Variables. Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che () situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable.</p> <p>le bloc qui permet de parcourir une liste  se trouve sous la cat\u00e9gorie  Boucles.</p> <pre><code>from machine import *\nimport utime\n# Servo on p26\nd2 = PWM(Pin(26), freq=50, duty=0)\n#  on cr\u00e9er une fonction pour calculer le duty et l'appliquer au servomoteur, \u00e0 partir d'un angle donn\u00e9.\ndef setServoAngle(pin, angle):\nif (angle &gt;= 0 and angle &lt;= 180):\npin.duty(int(0.025*1023 + (angle*0.1*1023)/180))\nelse:\nraise ValueError(\"Servomotor angle have to be set between 0 and 180\")\n# on d\u00e9fini une liste d'angle\nangles = [10, 90, 30]\nwhile True:\n#pour chaque angle de la liste angles on applique la fonction cr\u00e9er pr\u00e9c\u00e9demment\nfor i in angles:\nsetServoAngle(d2, i)\nutime.sleep(5)\n</code></pre>"},{"location":"boucles/boucle_iterative/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython <code>def</code>, <code>for</code> et <code>if else</code>.</p> <p>Pour en savoir plus sur  <code>def</code>, nous vous invitons \u00e0 lire la documentation MicroPython.</p> <p>Pour en savoir plus sur  <code>for in</code>, nous vous invitons \u00e0 lire la documentation MicroPython.</p> <p>Pour en savoir plus sur  <code>if else</code>, nous vous invitons \u00e0 lire la documentation MicroPython.</p>"},{"location":"boucles/boucle_simple/","title":"Boucle simple","text":"<p>\u00c9x\u00e9cuter des instructions plusieurs fois.</p>"},{"location":"boucles/boucle_simple/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code <pre><code># On utilise une boucle For pour ex\u00e9cuter\n# 3 fois la fonction print()\nfor count in range(3):\nprint('toc !');\n</code></pre>"},{"location":"boucles/boucle_simple/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython <code>print()</code>) et <code>range()</code>. Pour en savoir plus sur la fonction <code>range()</code>, nous vous invitons \u00e0 lire la documentation MicroPython.</p>"},{"location":"capteurs/capteur_lumiere/","title":"capteur de luminosit\u00e9","text":"<p>le capteur de luminosit\u00e9 est int\u00e9gr\u00e9 \u00e0 la led rgb du galaxia. Il permet de transformer l'intensit\u00e9 lumineuse en une valeur num\u00e9rique.</p>"},{"location":"capteurs/capteur_lumiere/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code vittascience embed <p> ouvrir dans vittascience</p> <pre><code>print(str(led.read()));\n</code></pre> <p></p>"},{"location":"capteurs/capteur_lumiere/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons la classe <code>Pin</code> qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython.</p> <p>Nous utilisons aussi <code>str()</code>, nous vous invitons \u00e0 lire la documentation MicroPython.</p>"},{"location":"communication/ecrire_dans_la_console/","title":"\u00c9crire dans la console","text":"<p>Permet d'\u00e9crire des donn\u00e9es dans le port s\u00e9rie (appel\u00e9 \u00e9galement console ou encore REPL). Le port s\u00e9rie permet d'\u00e9changer des donn\u00e9es entre la carte Galaxia et l'ordinateur gr\u00e2ce \u00e0 la liaison USB. Lorsque vous utilisez l'interface Vittascience, vous pouvez voir les donn\u00e9es re\u00e7ues de la carte (ou du simulateur) gr\u00e2ce au bouton  REPL situ\u00e9 en bas de l'interface .</p>"},{"location":"communication/ecrire_dans_la_console/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code <pre><code># print() fait partie du langage MicroPython\n# pas besoin d'importer un module\n# Affichage d'un message avec la fonction print()\nprint(\"Bonjour !\")\n</code></pre>"},{"location":"communication/ecrire_dans_la_console/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons la fonction <code>print()</code> qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython.</p>"},{"location":"entrees_sorties/temps/attendre/","title":"Attendre","text":"<p>Effectue une pause dans l'ex\u00e9cution du code.</p>"},{"location":"entrees_sorties/temps/attendre/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code <pre><code># On importe le module utime\nimport utime\n# Affichage d'un message avec la fonction print()\nprint(\"D\u00e9marrage du programme\")\n# On attend 1 seconde\nutime.sleep(1)\nprint(\"1 seconde \u00e9coul\u00e9e\")\n</code></pre>"},{"location":"entrees_sorties/temps/attendre/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons la fonction <code>print()</code> et le module <code>utime</code> qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur ce module, nous vous invitons \u00e0 lire la documentation MicroPython.</p>"},{"location":"entrees_sorties/temps/chronometre/","title":"Utiliser le chronom\u00e8tre","text":"<p>R\u00e9cup\u00e9rer le nombre de millisecondes \u00e9coul\u00e9es depuis le lancement de la carte.</p>"},{"location":"entrees_sorties/temps/chronometre/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code <p>Info</p> <p>Le bloc  permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs  Texte. Le bloc  permet d'arrondir un nombre flottant. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs  Math.</p> <pre><code># On importe le module utime (pour ticks_ms et ticks_diff)\nimport utime\n# On importe le module math (pour la fonction round)\nimport math\n# On vient stocker le temps de d\u00e9but\ndebut = utime.ticks_ms()\n# On r\u00e9p\u00e8te ind\u00e9finiment\nwhile True:\n# On affiche la diff\u00e9rence de temps entre maintenant et le d\u00e9but\nprint(round(utime.ticks_diff(utime.ticks_ms(), debut)/1000), \" secondes\")\n# On attend 1 seconde\nutime.sleep(1)\n</code></pre>"},{"location":"entrees_sorties/temps/chronometre/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons le module <code>utime</code> qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython.</p>"},{"location":"fonctions/fonction/","title":"D\u00e9finir une fonction","text":"<p>Rendre une partie de programme accessible par son nom en lui passant tout ce qui lui est n\u00e9cessaire pour fonctionner.</p> <p>Les variables d\u00e9clar\u00e9es dans la fonction ne sont valable qu'en local dans la fonction ()(port\u00e9e d'une variable). De plus dans une fonction, les variables globales ne sont disponible qu'en lecture.</p>"},{"location":"fonctions/fonction/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code <p>Info</p> <p>Les blocs pour d\u00e9finir une fonction  peuvent \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Fonctions. </p> <p>on ajoute le nombre de variables n\u00e9cessaires avec le . et on cr\u00e9\u00e9 les variables dans l'espace blanc sur le cot\u00e9 pr\u00e9vu \u00e0 cet effet </p> <p>Notez que dans cette cat\u00e9gorie il existe deux types de bloc. Des blocs pour les fonctions dont on r\u00e9cup\u00e8re le r\u00e9sultat dans le format de son choix. d'autre sans sortie</p> <pre><code>from machine import *\nimport time\n# LED Module on p26\nd2 = Pin(26, Pin.OUT)\n# on d\u00e9fini la fonction par un nom explicite,\n#  les variables d\u00e9clar\u00e9es dans la parenth\u00e8se pourront interagir avec le corps de la fonction\ndef blink_par__seconde(x):\nd2.on()\ntime.sleep(x)\nd2.off()\n# le corp de mon programme \nwhile True:\n# Appel de la fonction avec 2 comme param\u00e8tre    \nblink_par__seconde(2)\n</code></pre>"},{"location":"fonctions/fonction/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons la classe <code>def</code> qui permet de d\u00e9finir une fonction. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython.</p> <p>Plus haut on fait r\u00e9f\u00e9rence \u00e0 la port\u00e9e d'une variable pour en savoir plus sur cette notion la documentation Micropython</p>"},{"location":"listes/liste_avec_elts/","title":"Liste avec \u00e9l\u00e9ments","text":"<p>Utiliser une liste pour stocker une suite d'\u00e9l\u00e9ments. Pour profiter de tous les outils des listes pour g\u00e9rer ces \u00e9l\u00e9ments.</p>"},{"location":"listes/liste_avec_elts/#exemples","title":"Exemples","text":"Exemple avec des blocsExemple avec du code <p>Info</p> <p>Le bloc variable  peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs  Variables. Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che () situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable.</p> <p>Le bloc qui permet de parcourir une liste  se trouve sous la cat\u00e9gorie  Boucles.</p> <p>Le bloc pour affecter des \u00e9l\u00e9ments \u00e0 une liste  se trouve dans la cat\u00e9gorie de blocs  Listes.</p> <p>Le bloc pour affecter une liste a une variable  lui se trouve dans la cat\u00e9gorie Variables.</p> <pre><code># on cr\u00e9er une liste nomm\u00e9e bille    \nmesBilles = [5, 32, 14]\nwhile True:\nfor i in mesBilles:\nprint(str(i));\n</code></pre>"},{"location":"listes/liste_avec_elts/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython <code>print()</code> et <code>str()</code>. La fonction <code>print()</code> est d\u00e9taill\u00e9s dans la documentation MicroPython.</p> <p>Pour en savoir plus sur la fonction <code>str()</code>, nous vous invitons \u00e0 lire la documentation MicroPython.</p> <p>Nous utilisons une boucle it\u00e9rative et pour en savoir plus la aussi : la documentation MicroPython</p>"},{"location":"logique/executer_des_instructions_si_une_condition_est_vraie_ou_non/","title":"Ex\u00e9cuter des instructions si une condition est vraie ou non","text":"<p>Ex\u00e9cute une ou plusieurs instructions si une condition est vraie ou non.</p>"},{"location":"logique/executer_des_instructions_si_une_condition_est_vraie_ou_non/#exemple","title":"Exemple","text":"<p>Dans l'exemple ci-dessous, nous allons allumer une LED RVB en rouge si le seuil de luminosit\u00e9 est sup\u00e9rieur \u00e0 un certain seuil (125), sinon la LED RVB est allum\u00e9e en vert.</p>  Exemple avec des blocs Exemple avec du code <p></p> <p>Info</p> <p>Le bloc <code>if</code>  peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs  Logique. Notez qu'une condition doit \u00eatre fournie pour que ce bloc soit fonctionnel.</p> <pre><code># On boucle ind\u00e9finiment\nwhile True:\n# Si le niveau de luminosit\u00e9 relev\u00e9 par le capteur est sup\u00e9rieur \u00e0 125\nif led.read_light_level() &gt; 125:\n# Alors on allume la LED RVB en rouge\nled.set_colors(255, 0, 0)\nelse:\n# Sinon on allume la LED RVB en vert\nled.set_colors(0, 255, 0)\n</code></pre> <p>Si la partie entre <code>if</code> et les <code>:</code> est \u00e9valu\u00e9e comme vrai alors les instructions indent\u00e9es qui suivent les <code>:</code> seront ex\u00e9cut\u00e9es. Sinon ce sont les instructions situ\u00e9es apr\u00e8s le <code>else:</code> qui le seront.</p>"},{"location":"logique/executer_des_instructions_si_une_condition_est_vraie_ou_non/#aller-plus-loin","title":"Aller plus loin","text":"<p>On a souvent l'habitude de repr\u00e9senter le cours du programme avec un organigramme de programmation : <pre><code>graph TD\n    A[Je mets mes chaussures]--&gt;C{Est-ce qu'il pleut ?}\n    C --&gt;|non| D[Je sors]\n    C --&gt;|oui| E[Je prends un parapluie]\n    E --&gt; D</code></pre></p> <p>Si vous voulez en savoir plus sur les\u00a0organigrammes, voici une chouette page Wikip\u00e9dia. Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython <code>if</code> et <code>else</code>. Pour en savoir plus, nous vous invitons \u00e0 lire la documentation MicroPython.</p>"},{"location":"math/manipuler_des_nombres/","title":"Manipuler des nombres","text":"<p>Le module <code>math</code> fournit des fonctions permettant de manipuler des nombres.</p>"},{"location":"math/manipuler_des_nombres/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code <pre><code>import math\n# On initialise une variable appel\u00e9e nombre \u00e0 6\nnombre = 6\n# La ligne suivante va afficher 6 dans la console\nprint(nombre)\nnombre = nombre + 3\n# La ligne suivante va afficher 9 dans la console\nprint(nombre)\nnombre = math.sqrt(nombre)\n# La ligne suivante va afficher 3 dans la console\nprint(nombre)\nnombre = nombre / 6\n# La ligne suivante va afficher 0.5 dans la console\nprint(nombre)\nnombre = math.ceil(nombre)\n# La ligne suivante va afficher 1 (arrondi par exc\u00e8s du nombre flottant 0.5)\nprint(nombre)\n</code></pre>"},{"location":"math/manipuler_des_nombres/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons le module <code>math</code>.Pour en savoir plus sur ce module, nous vous invitons \u00e0 lire la documentation MicroPython.</p>"},{"location":"moteurs/servomoteur/","title":"Contr\u00f4ler un servomoteur","text":"<p>Permet de contr\u00f4ler l'angle d'un servomoteur (de 0 \u00e0 180) 0 \u00e0 180) sur les broches digitales.</p>"},{"location":"moteurs/servomoteur/#exemple-avec-des-blocs","title":"Exemple avec des blocs","text":""},{"location":"moteurs/servomoteur/#exemple-avec-du-code","title":"Exemple avec du code","text":"<pre><code># print() fait partie du langage MicroPython\n# pas besoin d'importer un module\n# Affichage d'un message avec la fonction print()\nprint(\"Bonjour !\")\n</code></pre>"},{"location":"moteurs/servomoteur/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons la fonction <code>print()</code> qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython.</p>"},{"location":"thingz/thingz/","title":"Thingz","text":"<p>La Carte galaxia a \u00e9t\u00e9 con\u00e7u par Thingz, une entreprise constitu\u00e9e de plein de gens sympathiques</p> <p>Pour r\u00e9aliser cette carte, Ils ont assembl\u00e9 plusieurs composants \u00e9lectroniques qui permettent d'ajouter \u00e0 la carte des capacit\u00e9s, comme capter la luminosit\u00e9, le magn\u00e9tisme, l'acc\u00e9l\u00e9ration, de jouer du son., etc.</p> <p>Pour qu'on puisse utiliser ces fonctionnalit\u00e9s, il a fallu que thingz cr\u00e9er un code qui traduit une utilisation simple en un code compr\u00e9hensible pour le composant, et ce, pour tous les composants.</p> <p>Ils ont regroup\u00e9 tout ce code dans une biblioth\u00e8que et l'ont appel\u00e9 Thingz (pour qu'on se le rappelle).</p> <p>Maintenant en python, \u00a0si la biblioth\u00e8que thingz est bien appel\u00e9e au d\u00e9but du programme, on peut appeler une fonction simple d'un composant.</p> <p><pre><code>import thingz\n</code></pre> Ici, j'importe toute la biblioth\u00e8que.</p> <p>O\u00f9 </p> <p><pre><code>from thingz import *\n</code></pre> l\u00e0, de la biblioth\u00e8que, j'importe seulement les modules.....tous (* est un joker qui remplace tout ce qu'on aurait pu \u00e9crire)</p> <p>l'information nous arrivera facilement sans ouvrir la documentation technique de tel ou tel composant.</p> <p>Mais qu'elles sont ces fonctions simples auxquelles on a acc\u00e8s ?</p> <p>Si je demande \u00e0 python de me dire ce \u00e0 quoi j'ai acc\u00e8s dans cette biblioth\u00e8que</p> <pre><code>dir()\n</code></pre> <p>['class', 'name', 'accelerometer', 'button_a', 'button_b', 'compass', 'internal_temperature', 'led', 'radio', 'screen', 'set_temperature_offset', 'sound', 'touch_e', 'touch_n', 'touch_s', 'touch_w']</p> <p>thingz.accelerometer</p>"},{"location":"thingz/thingz_accelerometer/","title":"thingz.accelerometer","text":""},{"location":"thingz/thingz_accelerometer/#get_gestures","title":"get_gestures() :","text":"<p>Cette fonction retourne une cha\u00eene de caract\u00e8res qui indique le type de geste ou de mouvement d\u00e9tect\u00e9</p> <ul> <li>\"tap\" : D\u00e9tection d'un tap ou d'un double tap sur la carte Galaxia.</li> <li>\"shake\" : D\u00e9tection d'un mouvement de secousse de la carte Galaxia.</li> <li>\"up\" : D\u00e9tection d'un mouvement ascendant de la carte Galaxia.</li> <li>\"down\" : D\u00e9tection d'un mouvement descendant de la carte Galaxia.</li> <li>\"left\" : D\u00e9tection d'un mouvement vers la gauche de la carte Galaxia.</li> <li>\"right\" : D\u00e9tection d'un mouvement vers la droite de la carte Galaxia.</li> <li>\"face up\" : D\u00e9tection si l'\u00e9cran est vers le haut </li> <li>\"face down\" : D\u00e9tection si l'\u00e9cran est vers le bas </li> <li>\"free fall\" : D\u00e9tection d'un mouvement de chute libre</li> <li>\"3g\" </li> <li>\"6g\"</li> <li>\"8g\"</li> <li>\"none\"</li> </ul> <p>Exemple de code utilisant la fonction <code>get_gestures()</code> pour d\u00e9tecter les mouvements de secousse de la carte Galaxia : <pre><code>from machine import *\nfrom thingz import *\nwhile True:\ngesture = accelerometer.current_gesture()\nif gesture == \"shake\":\nprint(\"shake!\");\n</code></pre></p> <pre><code>## testing\nfrom machine import *\nfrom thingz import *\nwhile True:\ngesture = accelerometer.current_gesture()\nif gesture == \"shake\":\nprint(\"shake!\");\nif gesture == \"tap\":\nprint(\"tap d\u00e9tect\u00e9 !\");\nif gesture == \"up\":\nprint(\"up !\");\nif gesture == \"down ! \":\nprint(\"down !\");\nif gesture == \"6g\":\nprint(\"6g !\");\nif gesture == \"left\":\nprint(\"left !\");\n</code></pre>"},{"location":"thingz/thingz_accelerometer/#get_x","title":"get_x()","text":"<p>Renvoie un float repr\u00e9sentant la valeur de l\u2019acc\u00e9l\u00e9ration sur l\u2019axe x en mG.</p> <pre><code>from thingz import *\nwhile True:\nprint(str(accelerometer.get_x()));\n</code></pre>"},{"location":"thingz/thingz_accelerometer/#get_y","title":"get_y()","text":"<p>Renvoie un r\u00e9el float repr\u00e9sentant la valeur de l\u2019acc\u00e9l\u00e9ration sur l\u2019axe y en mG</p>"},{"location":"thingz/thingz_accelerometer/#get_z","title":"get_z()","text":"<p>Renvoie un r\u00e9el float repr\u00e9sentant la valeur de l\u2019acc\u00e9l\u00e9ration sur l\u2019axe  z en mG</p>"},{"location":"thingz/thingz_accelerometer/#get_values","title":"get_values()","text":"<p>Renvoie une list pour les valeurs d\u2019acc\u00e9l\u00e9ration sur les 3 axes L\u2019index 0 correspond \u00e0 l\u2019axe X,1 pour Y et 2 pour Z</p>"},{"location":"thingz/thingz_accelerometer/#is_gesture_gesture-str","title":"is_gesture(_gesture:\u00a0str )","text":"<p>Cette fonction prend en parametre  Le geste \u00e0 tester et renvoie un booleen ( True si le geste courant est celui \u00e0 tester )</p>"},{"location":"thingz/thingz_accelerometer/#was_gesturegesture-str","title":"was_gesture(gesture:\u00a0str )","text":"<p>Cette fonction prend en parametre  Le geste \u00e0 tester et renvoie un booleen (True si le geste a \u00e9t\u00e9 actif depuis le dernier appel \u00e0 cette fonction )</p>"},{"location":"thingz/thingz_accelerometer/#get_gestures_1","title":"get_gestures()","text":"<p>Renvoie un liste de l\u2019historique des gestes. Le plus r\u00e9cent est \u00e0 la fin de la liste</p>"},{"location":"thingz/thingz_button/","title":"thingz.button","text":""},{"location":"thingz/thingz_button/#thingzbuttontouch","title":"thingz.ButtonTouch","text":"<p>Contr\u00f4ler les boutons physiques de la Galaxia</p> <p>les boutons A et B utilise la class button</p> <p>ils sont accessibles par leurs noms</p> <p>thingz.button_a</p> <p>thingz.button_b</p> <p>et les boutons n, s, e, w utilise la class buttonTouch</p> <p>il sont accessibles par leurs noms</p> <p>thingz.touch_n:ButtonTouch</p> <p>thingz.touch_s:ButtonTouch</p> <p>thingz.touch_e:ButtonTouch</p> <p>thingz.touch_w:ButtonTouch</p> <p>Cependant les fonctions ont les m\u00eames noms</p>"},{"location":"thingz/thingz_button/#is_pressed","title":"is_pressed()","text":"<p>Renvoie un bool\u00e9en bool True si le bouton est press\u00e9, sinon False</p>"},{"location":"thingz/thingz_button/#was_pressed","title":"was_pressed()","text":"<p>Renvoie un bool\u00e9en bool True si le bouton a \u00e9t\u00e9 appuy\u00e9 depuis le dernier appel \u00e0 cette fonction, sinon False</p>"},{"location":"thingz/thingz_button/#get_presses","title":"get_presses()","text":"<p>Renvoie un entier int repr\u00e9sentant le nombre d\u2019appuis depuis le dernier appel.</p>"},{"location":"thingz/thingz_button/#on_pressedcallback-callable","title":"on_pressed(callback:\u00a0Callable)","text":"<p>Enregistre une fonction de callback associ\u00e9e \u00e0 l\u2019\u00e9venement appui elle prend le nom de la La fonction \u00e0 appeler lors de l\u2019appui.  Le bouton concern\u00e9 est pass\u00e9 en param\u00e8tre de la fonction de callback</p>"},{"location":"thingz/thingz_compass/","title":"thingz.compas","text":""},{"location":"thingz/thingz_compass/#thingzcompass","title":"thingz.compass","text":""},{"location":"thingz/thingz_compass/#get_x","title":"get_x()","text":"<p>Renvoie un float Le champ magn\u00e9tique sur l\u2019axe x en uT</p>"},{"location":"thingz/thingz_compass/#get_y","title":"get_y()","text":"<p>Renvoie un float Le champ magn\u00e9tique sur l\u2019axe y en uT</p>"},{"location":"thingz/thingz_compass/#get_z","title":"get_z()","text":"<p>Renvoie un float Le champ magn\u00e9tique sur l\u2019axe z en uT</p>"},{"location":"thingz/thingz_compass/#get_values","title":"get_values()","text":"<p>Renvoie une liste pour les valeurs du champs magn\u00e9tique sur les 3 axes L\u2019index 0 correspond \u00e0 l\u2019axe X,1 pour Y et 2 pour Z</p>"},{"location":"thingz/thingz_compass/#heading","title":"heading()","text":"<p>Renvoie un float  repr\u00e9sentant le cap courant  de 0\u00b0 a 360\u00b0 </p> <pre><code>from thingz import *\nwhile True:\nprint(str(compass.heading()));\n</code></pre>"},{"location":"thingz/thingz_compass/#calibratehard_time-int-soft_time-int","title":"calibrate(hard_time:\u00a0int,\u00a0soft_time:\u00a0int)","text":"<p>Calibrer le magn\u00e9tom\u00e8tre.</p> <p>Pendant la calibration il est n\u00e9cessaire de faire pivoter la carte dans toutes les directions.</p> <p>La calibration peut durer plusieurs minutes et ne communique pas</p> <p>les param\u00e8tres:</p> <ul> <li> <p>hard_time\u00a0(int) \u2013 Temps \u00e0 passer dans la premi\u00e8re \u00e9tape de calibration (en secondes). Valeur recommand\u00e9e 5</p> </li> <li> <p>soft_time\u00a0(int) \u2013 Temps \u00e0 passer dans la deuxi\u00e8me \u00e9tape de calibration (en secondes). Valeur recommand\u00e9e 5</p> </li> </ul>"},{"location":"thingz/thingz_led/","title":"Thingz.Led","text":"<p>Contr\u00f4ler la LED RGB de la Galaxia</p>"},{"location":"thingz/thingz_led/#set_colorsred-int-green-int-blue-int","title":"set_colors(red: int, green: int, blue: int)","text":"<p>R\u00e9gler l'intensit\u00e9 lumineuse du rouge, du vert et du bleu de la LED</p> <p>Param\u00e8tres: red (int) \u2013 La valeur rouge, comprise entre 0 et 255</p> <p>green (int) \u2013 La valeur verte, comprise entre 0 et 255</p> <p>blue (int) \u2013 La valeur bleue, comprise entre 0 et 255</p> <pre><code>from thingz import *\nwhile True:\nled.set_colors(100, 100, 0)\n</code></pre>"},{"location":"thingz/thingz_led/#set_redred-int","title":"set_red(red: int)","text":"<p>R\u00e9gle l'intensit\u00e9 de la couleur rouge,</p> <p>prend comme param\u00e8tres un entier int compris entre 0 et 255</p>"},{"location":"thingz/thingz_led/#set_greengreen-int","title":"set_green(green: int)","text":"<p>R\u00e9gle l'intensit\u00e9 de la couleur verte,</p> <p>prend comme param\u00e8tres un entier int compris entre 0 et 255</p>"},{"location":"thingz/thingz_led/#set_blueblue-int","title":"set_blue(blue: int)","text":"<p>R\u00e9gle l'intensit\u00e9 de la couleur bleue,</p> <p>prend comme param\u00e8tres un entier int compris entre 0 et 255</p>"},{"location":"thingz/thingz_led/#get_red-int","title":"get_red()\u2192 int","text":"<p>Renvoie un entier int La valeur de l'intensit\u00e9 du bleue courante, comprise entre 0 et 255</p>"},{"location":"thingz/thingz_led/#get_green-int","title":"get_green()\u2192 int","text":"<p>Renvoie un entier int La valeur de l'intensit\u00e9 du verte courante, comprise entre 0 et 255</p>"},{"location":"thingz/thingz_led/#get_blue-int","title":"get_blue()\u2192 int","text":"<p>Renvoie un entier int La valeur de l'intensit\u00e9 du bleue courante, comprise entre 0 et 255</p>"},{"location":"thingz/thingz_led/#read_light_level","title":"read_light_level()","text":"<p>Renvoie un int entre 0 (nuit) et 100 (plein jour) qui repr\u00e9sente la luminosit\u00e9 ambiante courante</p>"},{"location":"thingz/thingz_radio/","title":"Thingz.radio","text":"<p>Envoyer et recevoir des donn\u00e9es entre Galaxias</p>"},{"location":"thingz/thingz_radio/#senddata-str","title":"send(data: str)","text":"<p>Envoie un message. Le message sera diffus\u00e9 sur le canal actuellement param\u00e9tr\u00e9. Toutes les Galaxias \u00e9coutant le m\u00eame canal</p> <p>Param\u00e8tres: data (str) \u2013 donn\u00e9es sous la forme d'une chaine de caract\u00e8re str</p>"},{"location":"thingz/thingz_radio/#receive","title":"receive()","text":"<p>Attend de recevoir les donn\u00e9es \u00e0 recevoir</p> <p>Renvoie une chaine de caract\u00e8re str, La donn\u00e9es re\u00e7ue </p>"},{"location":"thingz/thingz_radio/#set_chanelchannel-int","title":"set_chanel(channel: int)","text":"<p>Configurer le canal utilis\u00e9 par la Galaxia</p> <p>Param\u00e8tres: channel (int) \u2013 Le canal un entier int entre 1 et 10</p>"},{"location":"thingz/thingz_radio/#get_channel","title":"get_channel()","text":"<p>R\u00e9cup\u00e9re le canal utilis\u00e9 par la Galaxia</p> <p>Renvoie dans un entier int le canal utilis\u00e9 par la Galaxia</p>"},{"location":"thingz/thingz_sound/","title":"thingz.Sound","text":"<p>G\u00e9nerer des sons sur le connecteur jack de la Galaxia</p>"},{"location":"thingz/thingz_sound/#playon-bool-freq-int","title":"play(on: bool, freq: int)","text":"<p>Param\u00e8tres: la valeur bool\u00e9enne bool indiquera la g\u00e9n\u00e9ration ou l'arr\u00e9t de la fr\u00e9quence indiqu\u00e9 dans un entier int </p> <p>freq (int) \u2013 La fr\u00e9quence \u00e0 g\u00e9n\u00e9rer (en Hz)</p>"},{"location":"thingz/thingz_sound/#set_frequencyfreq-int","title":"set_frequency(freq: int)","text":"<p>R\u00e9gler la frequence (en Hz) du g\u00e9n\u00e9rateur, indiqu\u00e9e dans un entier *int </p>"},{"location":"thingz/thingz_sound/#set_volumevolume-int","title":"set_volume(volume: int)","text":"<p>R\u00e9gler le volume du son indiqu\u00e9 dans un entier int  entre 0 et 100 S</p>"},{"location":"thingz/thingz_sound/#play_samplefilename-str","title":"play_sample(filename: str)","text":"<p>Jouer un extrait sonore. L\u2019extrait doit \u00eatre au format wav</p> <p>Param\u00e8tres: filename (str) \u2013 Le chemin vers l\u2019extrait. Il doit \u00eatre sauvegard\u00e9 dans le stockage usb de la Galaxia</p>"},{"location":"thingz/thingz_temperature/","title":"thingz.temperature","text":""},{"location":"thingz/thingz_temperature/#thingztemperature","title":"thingz.temperature","text":""},{"location":"thingz/thingz_temperature/#temperature","title":"temperature()","text":"<p>Renvoie un int repr\u00e9sentant la temp\u00e9rature courante courante en utilisant le capteur interne du microcontr\u00f4leur</p>"},{"location":"thingz/thingz_temperature/#set_temperature_offsetoffset-int","title":"set_temperature_offset(offset: int)","text":"<p>Calibrer le capteur de temp\u00e9rature interne du microcontr\u00f4leur en appliquant un offset, un entier int</p>"},{"location":"variables/variable_nombre/","title":"Utiliser une variable pour y stocker des nombres","text":"<p>Une variable est un espace m\u00e9moire dans lequel il est possible de mettre une valeur. Par exemple, pour stocker un nombre dans une variable et modifier sa valeur, je peux utiliser les instructions suivantes :</p>"},{"location":"variables/variable_nombre/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code <p>Info</p> <p>Le bloc  permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs  Texte. Les blocs permettant de manipuler les nombre \u00eatre trouv\u00e9s dans la cat\u00e9gorie de blocs  Op\u00e9rateurs</p> <pre><code># On affecte un nombre a une variable de la fa\u00e7on suivante :\npersonnes_presentes = 1\n# On affiche la valeur de la variable pr\u00e9c\u00e9d\u00e9 par du texte \nprint(\"Nombre de personnes pr\u00e9sentes : \" +  personnes_presentes)\nprint('Une personne entre !')\n# On incr\u00e9mente la variable de 1\npersonnes_presentes = personnes_presentes + 1\nprint(\"Nombre de personnes pr\u00e9sentes : \" +  personnes_presentes)\nprint('Trois personnes entrent !');\n# on incr\u00e9mente la variable de 3\npersonnes_presentes = personnes_presentes + 3\nprint(\"Nombre de personnes pr\u00e9sentes : \" +  personnes_presentes)\nprint('Une personne sort !')\npersonnes_presentes = personnes_presentes - 1\nprint(\"Nombre de personnes pr\u00e9sentes : \" +  personnes_presentes)\n</code></pre>"},{"location":"variables/variable_nombre/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons la fonction <code>print()</code> qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython.</p>"},{"location":"variables/variable_texte/","title":"Utiliser une variable pour y stocker du texte","text":"<p>Une variable est un espace m\u00e9moire dans lequel il est possible de mettre une valeur. Par exemple, pour stocker un pr\u00e9nom (qui est un texte) dans une variable, je peux utiliser les instructions suivantes :</p>"},{"location":"variables/variable_texte/#exemple","title":"Exemple","text":"Exemple avec des blocs Exemple avec du code <p>Info</p> <p>Le bloc  permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs  Texte.</p> <pre><code># prenom est le nom de ma variable\n# \"Baptiste\" est une cha\u00eene de caract\u00e8res, notez bien les guillemets\n# le signe '=' va stocker la cha\u00eene de caract\u00e8res dans la variable prenom \nprenom = \"Baptiste\"\nprint(\"Salut \", prenom, \" !\");\n</code></pre>"},{"location":"variables/variable_texte/#aller-plus-loin","title":"Aller plus loin","text":"<p>Dans l'exemple ci-dessus, nous utilisons la fonction <code>print()</code> qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython.</p>"}]}