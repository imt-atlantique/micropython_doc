{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenue Vous suivez les cours en ligne de l'IMT sur MicroPython et vous cherchez de l'aide ? Vous \u00eates au bon endroit ! Vos outils L'interface Vittascience : D\u00e9buter avec l'interface de d\u00e9veloppement d\u00e9velopp\u00e9e par notre partenaire Vittascience Carte Galaxia : Tout savoir sur la carte \u00e9lectronique d\u00e9velopp\u00e9e par notre partenaire Thingz La doc Affichage Entr\u00e9es/Sorties Communication Capteurs Actionneurs","title":"Fonctions"},{"location":"#bienvenue","text":"Vous suivez les cours en ligne de l'IMT sur MicroPython et vous cherchez de l'aide ? Vous \u00eates au bon endroit !","title":"Bienvenue"},{"location":"interface/","text":"Interface Vittascience L'interface de programmation Vittascience permet de programmer la carte \u00e9lectronique Galaxia depuis votre navigateur web en assemblant visuellement des blocs comme un puzzle. Ces blocs vont ensuite g\u00e9n\u00e9rer automatiquement un code MicroPython compr\u00e9hensible par la carte. Info Veuillez notez qu'il est \u00e9galement possible de se passer des blocs et utiliser l'interface en mode code uniquement Gestion des projets Nouveau projet Sauvegarder le projet Ouvrir un projet existant Modes d'affichage L'interface dispose de trois modes d'affichage : blocs , hybride , ou code . Pour passer d'un mode \u00e0 un autre, vous pouvez utiliser le groupe de boutons en haut \u00e0 droite : Mode blocs Ce mode vous permet d'assembler des blocs depuis le volet gauche de l'interface vers la partie centrale o\u00f9 vous pouvez faire glisser les blocs et les assembler pour former un programme. Mode hybride Ce mode reprend le mode blocs et ajoute un nouveau volet contenant la traduction des blocs en MicroPython. Mode code Ce mode vous permet de taper directement du code MicroPython.","title":"Interface Vittascience"},{"location":"interface/#interface-vittascience","text":"L'interface de programmation Vittascience permet de programmer la carte \u00e9lectronique Galaxia depuis votre navigateur web en assemblant visuellement des blocs comme un puzzle. Ces blocs vont ensuite g\u00e9n\u00e9rer automatiquement un code MicroPython compr\u00e9hensible par la carte. Info Veuillez notez qu'il est \u00e9galement possible de se passer des blocs et utiliser l'interface en mode code uniquement","title":"Interface Vittascience"},{"location":"affichage/led/","text":"Permet de contr\u00f4ler l'\u00e9tat de la LED connect\u00e9e sur une broche de la carte \u00e9lectronique. Branchement Bloc Code Exemple : Allumage d'une LED 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # On importe les modules machine et utime from machine import * import utime # D\u00e9claration d'une broche en sortie sur la broche 2 # \u00e0 l'aide du constructeur Pin() led = Pin ( 2 , Pin . OUT ) # On allume la LED led . on () # On attend 1 seconde utime . sleep ( 1 ) # On \u00e9teint la LED led . off () Documentation MicroPython Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Affichage"},{"location":"affichage/led/#branchement","text":"","title":"Branchement"},{"location":"affichage/led/#bloc","text":"","title":"Bloc"},{"location":"affichage/led/#code","text":"","title":"Code"},{"location":"affichage/galaxia-led_rgb/led_rgb/","text":"TODO : refaire cette fiche lorsque le simulateur est ok Permet de r\u00e9gler l'intensit\u00e9 de la LED int\u00e9gr\u00e9e \u00e0 la carte Galaxia, de 0 \u00e0 100 pour chacune des couleurs (rouge, vert, bleu). Branchement Bloc Code Exemple : Allumage d'une LED 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # On importe les modules machine et utime from machine import * import utime # D\u00e9claration d'une broche en sortie sur la broche 2 # \u00e0 l'aide du constructeur Pin() led = Pin ( 2 , Pin . OUT ) # On allume la LED led . on () # On attend 1 seconde utime . sleep ( 1 ) # On \u00e9teint la LED led . off () Documentation MicroPython Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"TODO : refaire cette fiche lorsque le simulateur est ok"},{"location":"affichage/galaxia-led_rgb/led_rgb/#todo-refaire-cette-fiche-lorsque-le-simulateur-est-ok","text":"Permet de r\u00e9gler l'intensit\u00e9 de la LED int\u00e9gr\u00e9e \u00e0 la carte Galaxia, de 0 \u00e0 100 pour chacune des couleurs (rouge, vert, bleu).","title":"TODO : refaire cette fiche lorsque le simulateur est ok"},{"location":"affichage/galaxia-led_rgb/led_rgb/#branchement","text":"","title":"Branchement"},{"location":"affichage/galaxia-led_rgb/led_rgb/#bloc","text":"","title":"Bloc"},{"location":"affichage/galaxia-led_rgb/led_rgb/#code","text":"","title":"Code"},{"location":"boucles/boucle_avec_variable/","text":"Boucle avec variable Faire prendre \u00e0 la variable i les valeurs depuis le nombre de d\u00e9but jusqu\u2019au nombre de fin, en s\u2019incr\u00e9mentant du pas sp\u00e9cifi\u00e9, et ex\u00e9cuter les instructions situ\u00e9es dans la boucle. Exemple avec des blocs Info Le bloc variable peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Variables . Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che ( ) situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable. Exemple avec du code 1 2 3 4 5 6 7 8 9 # On importe le module utime import utime # On utilise une boucle For pour ex\u00e9cuter # 10 fois les fonctions print() et sleep() for i in range ( 10 ): # Notez que la fonction print() peut prendre plusieurs arguments print ( i , \" secondes \u00e9coul\u00e9es\" ) utime . sleep ( 1 ) Aller plus loin Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () et range () . Pour en savoir plus sur la fonction range () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Boucle avec variable"},{"location":"boucles/boucle_avec_variable/#boucle-avec-variable","text":"Faire prendre \u00e0 la variable i les valeurs depuis le nombre de d\u00e9but jusqu\u2019au nombre de fin, en s\u2019incr\u00e9mentant du pas sp\u00e9cifi\u00e9, et ex\u00e9cuter les instructions situ\u00e9es dans la boucle.","title":"Boucle avec variable"},{"location":"boucles/boucle_simple/","text":"Boucle simple \u00c9x\u00e9cuter des instructions plusieurs fois. Exemple avec des blocs Exemple avec du code 1 2 3 4 # On utilise une boucle For pour ex\u00e9cuter # 3 fois la fonction print() for count in range ( 3 ): print ( 'toc !' ); Aller plus loin Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () et range () . Pour en savoir plus sur la fonction range () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Boucle simple"},{"location":"boucles/boucle_simple/#boucle-simple","text":"\u00c9x\u00e9cuter des instructions plusieurs fois.","title":"Boucle simple"},{"location":"communication/ecrire_dans_la_console/","text":"\u00c9crire dans la console Permet d'\u00e9crire des donn\u00e9es dans le port s\u00e9rie (appel\u00e9 \u00e9galement console ou encore REPL ). Le port s\u00e9rie permet d'\u00e9changer des donn\u00e9es entre la carte Galaxia et l'ordinateur gr\u00e2ce \u00e0 la liaison USB. Lorsque vous utilisez l'interface Vittascience, vous pouvez voir les donn\u00e9es re\u00e7ues de la carte (ou du simulateur) gr\u00e2ce au bouton REPL situ\u00e9 en bas de l'interface . Exemple avec des blocs Exemple du code 1 2 3 4 5 # print() fait partie du langage MicroPython # pas besoin d'importer un module # Affichage d'un message avec la fonction print() print ( \"Bonjour !\" ) Aller plus loin Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Communication"},{"location":"communication/ecrire_dans_la_console/#ecrire-dans-la-console","text":"Permet d'\u00e9crire des donn\u00e9es dans le port s\u00e9rie (appel\u00e9 \u00e9galement console ou encore REPL ). Le port s\u00e9rie permet d'\u00e9changer des donn\u00e9es entre la carte Galaxia et l'ordinateur gr\u00e2ce \u00e0 la liaison USB. Lorsque vous utilisez l'interface Vittascience, vous pouvez voir les donn\u00e9es re\u00e7ues de la carte (ou du simulateur) gr\u00e2ce au bouton REPL situ\u00e9 en bas de l'interface .","title":"\u00c9crire dans la console"},{"location":"entrees_sorties/temps/attendre/","text":"Attendre Effectue une pause dans l'ex\u00e9cution du code. Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 # On importe le module utime import utime # Affichage d'un message avec la fonction print() print ( \"D\u00e9marrage du programme\" ) # On attend 1 seconde utime . sleep ( 1 ) print ( \"1 seconde \u00e9coul\u00e9e\" ) Aller plus loin Dans l'exemple ci-dessus, nous utilisons la fonction print () et le module utime qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Entr\u00e9es/Sorties"},{"location":"entrees_sorties/temps/attendre/#attendre","text":"Effectue une pause dans l'ex\u00e9cution du code.","title":"Attendre"},{"location":"includes/abbreviations/","text":"","title":"Abbreviations"},{"location":"logique/instruction_conditionnelle/","text":"Instruction conditionnelle Comme son nom l'indique, c'est une partie du programme qui oriente le flux du programme selon si une condition est r\u00e9alis\u00e9e ou non par exemple : si il pleut, je prend mon parapluie et je sors, sinon je sors Souvent on a l'abitude de le repr\u00e9senter avec un organigramme de programmation si vous voulez en savoir plus sur les organigrammes en python \u00e7a prend la forme suivante : 1 2 3 if ( il_pleut ) : je_prend_un_parapluie () je_sort () si la partie entre if et les \":\"\" , (il_pleut) est \u00e9valu\u00e9 comme vrai, alors le block de code qui suit les \":\"\" et qui est indent\u00e9 sera interpr\u00e9t\u00e9. sinon ce bloc ne sera pas pris en compte, et le programme continura par le bloc de m\u00eame indentation que l'instruction conditionnelle if en block du menu logique il faut faire glisser le bloc d\u00e9cisionnel ensuite ensuite \u00e9laborer la proposition \u00e0 \u00e9valuer vous devez - placer un \u00e9lement \u00e0 comparer dans l'oblon - choisir le comparatif ( strictement plus petit ,strictement plus grand, plus petit ou \u00e9gale , plus grand ou \u00e9gale, \u00e9gale, diff\u00e9rent ) - Choisir la valeur avec laquelle on doit comparer il ne vous reste plus qu'a positionner dans le corps du bloc ce qui ce passera si la condition est r\u00e9alis\u00e9e.","title":"Instruction conditionnelle"},{"location":"logique/instruction_conditionnelle/#instruction-conditionnelle","text":"Comme son nom l'indique, c'est une partie du programme qui oriente le flux du programme selon si une condition est r\u00e9alis\u00e9e ou non par exemple : si il pleut, je prend mon parapluie et je sors, sinon je sors Souvent on a l'abitude de le repr\u00e9senter avec un organigramme de programmation si vous voulez en savoir plus sur les organigrammes en python \u00e7a prend la forme suivante : 1 2 3 if ( il_pleut ) : je_prend_un_parapluie () je_sort () si la partie entre if et les \":\"\" , (il_pleut) est \u00e9valu\u00e9 comme vrai, alors le block de code qui suit les \":\"\" et qui est indent\u00e9 sera interpr\u00e9t\u00e9. sinon ce bloc ne sera pas pris en compte, et le programme continura par le bloc de m\u00eame indentation que l'instruction conditionnelle if en block du menu logique il faut faire glisser le bloc d\u00e9cisionnel ensuite ensuite \u00e9laborer la proposition \u00e0 \u00e9valuer vous devez - placer un \u00e9lement \u00e0 comparer dans l'oblon - choisir le comparatif ( strictement plus petit ,strictement plus grand, plus petit ou \u00e9gale , plus grand ou \u00e9gale, \u00e9gale, diff\u00e9rent ) - Choisir la valeur avec laquelle on doit comparer il ne vous reste plus qu'a positionner dans le corps du bloc ce qui ce passera si la condition est r\u00e9alis\u00e9e.","title":"Instruction conditionnelle"},{"location":"moteurs/servomoteur/","text":"Contr\u00f4ler un servomoteur Permet de contr\u00f4ler l'angle d'un servomoteur (de 0 \u00e0 180) 0 \u00e0 180) sur les broches digitales. Exemple avec des blocs Exemple avec du code 1 2 3 4 5 # print() fait partie du langage MicroPython # pas besoin d'importer un module # Affichage d'un message avec la fonction print() print ( \"Bonjour !\" ) Aller plus loin Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Actionneurs"},{"location":"moteurs/servomoteur/#controler-un-servomoteur","text":"Permet de contr\u00f4ler l'angle d'un servomoteur (de 0 \u00e0 180) 0 \u00e0 180) sur les broches digitales.","title":"Contr\u00f4ler un servomoteur"},{"location":"variables/variable_chaine_de_caracteres/","text":"Utiliser une variable pour y stocker une cha\u00eene de caract\u00e8res Une variable est un espace m\u00e9moire dans lequel il est possible de mettre une valeur. Par exemple, pour stocker un pr\u00e9nom (qui est un texte) dans une variable, je peux utiliser les instructions suivantes : Exemple avec des blocs Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte . Exemple avec du code 1 2 3 4 5 # prenom est le nom de ma variable # \"Baptiste\" est une cha\u00eene de caract\u00e8res, notez bien les guillemets # le signe '=' va stocker la cha\u00eene de caract\u00e8res dans la variable prenom prenom = \"Baptiste\" print ( \"Salut \" , prenom , \" !\" ); Aller plus loin Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Stocker du texte"},{"location":"variables/variable_chaine_de_caracteres/#utiliser-une-variable-pour-y-stocker-une-chaine-de-caracteres","text":"Une variable est un espace m\u00e9moire dans lequel il est possible de mettre une valeur. Par exemple, pour stocker un pr\u00e9nom (qui est un texte) dans une variable, je peux utiliser les instructions suivantes :","title":"Utiliser une variable pour y stocker une cha\u00eene de caract\u00e8res"}]}