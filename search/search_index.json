{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accueil \u00b6 Vous suivez les cours en ligne de l'IMT sur MicroPython et vous cherchez de l'aide ? Vous \u00eates au bon endroit ! Vos outils \u00b6 L'interface Vittascience : D\u00e9buter avec l'interface de d\u00e9veloppement d\u00e9velopp\u00e9e par notre partenaire Vittascience Carte Galaxia : Tout savoir sur la carte \u00e9lectronique d\u00e9velopp\u00e9e par notre partenaire Thingz Guides de r\u00e9f\u00e9rence \u00b6 Vous trouverez dans les cat\u00e9gories suivantes des exemples et des ressources p\u00e9dagogiques consacr\u00e9es au langage MicroPython : Exemples issus du langage Python Exemples sp\u00e9cifiques \u00e0 MicroPython Logique Affichage Boucles Entr\u00e9es/Sorties Math Communication Texte Capteurs Variables Actionneurs Listes Fonctions","title":"Accueil"},{"location":"#accueil","text":"Vous suivez les cours en ligne de l'IMT sur MicroPython et vous cherchez de l'aide ? Vous \u00eates au bon endroit !","title":"Accueil"},{"location":"#vos-outils","text":"L'interface Vittascience : D\u00e9buter avec l'interface de d\u00e9veloppement d\u00e9velopp\u00e9e par notre partenaire Vittascience Carte Galaxia : Tout savoir sur la carte \u00e9lectronique d\u00e9velopp\u00e9e par notre partenaire Thingz","title":"Vos outils"},{"location":"#guides-de-reference","text":"Vous trouverez dans les cat\u00e9gories suivantes des exemples et des ressources p\u00e9dagogiques consacr\u00e9es au langage MicroPython : Exemples issus du langage Python Exemples sp\u00e9cifiques \u00e0 MicroPython Logique Affichage Boucles Entr\u00e9es/Sorties Math Communication Texte Capteurs Variables Actionneurs Listes Fonctions","title":"Guides de r\u00e9f\u00e9rence"},{"location":"galaxia/","text":"La carte Galaxia est une carte \u00e9lectronique d\u00e9velopp\u00e9e par l'entreprise toulousaine Thingz . Cette carte est programmable avec le langage MicroPython et \u00e7a tombe bien puisque c'est ce langage de programmation que vous allez apprendre dans les cours en ligne de l'IMT ! Info Passez votre souris et cliquez sur l'image ci-contre pour en savoir plus sur les composants de la carte Galaxia ! admonition = document.querySelector('.end'); admonition.style.marginRight=\"64px\"; .cls-6:hover{fill:#22b573;}.cls-8:hover{fill:#22b573;}.cls-15:hover{fill:#22b573;}.cls-14:hover{fill:#22b573;}.cls-2:hover{fill:#22b573;}.cls-27:hover{fill:#22b573;}.cls-1{fill:#d1d0c6;}.cls-2,.cls-3{fill:#f8a800;}.cls-2{opacity:0.43;}.cls-3{opacity:0.44;}.cls-10,.cls-15,.cls-16,.cls-22,.cls-24,.cls-27,.cls-29,.cls-30,.cls-4{fill:#000000;}.cls-28,.cls-29,.cls-4{stroke:#000;}.cls-15,.cls-22,.cls-25,.cls-28,.cls-30,.cls-4{stroke-linejoin:round;}.cls-5,.cls-7{stroke:#ffba00;}.cls-10,.cls-11,.cls-12,.cls-13,.cls-16,.cls-17,.cls-21,.cls-23,.cls-24,.cls-27,.cls-29,.cls-5,.cls-7,.cls-8{stroke-miterlimit:10;}.cls-22,.cls-24,.cls-25,.cls-5{stroke-width:2px;}.cls-6{fill:#ffba00;}.cls-17,.cls-21,.cls-23,.cls-26,.cls-7{fill:#fff;}.cls-12,.cls-8{fill:#f2f2f2;}.cls-8{stroke:#ccc;}.cls-17,.cls-27,.cls-8{stroke-width:0.75px;}.cls-9{fill:gray;}.cls-10,.cls-11,.cls-12,.cls-13,.cls-15,.cls-17,.cls-21,.cls-22,.cls-23,.cls-24,.cls-25,.cls-27,.cls-30{stroke:#fff;}.cls-11{fill:#999;}.cls-13{fill:#1536ff;}.cls-14{fill:#ffe63f;}.cls-15,.cls-16,.cls-22,.cls-24,.cls-25,.cls-28{stroke-linecap:round;}.cls-16{stroke:#ff2eb5;}.cls-17{font-size:12.54px;}.cls-17,.cls-21,.cls-23{font-family:GTEestiProDisplay-Regular, GT Eesti Pro Display;}.cls-18{letter-spacing:-0.04em;}.cls-19{letter-spacing:-0.02em;}.cls-20{letter-spacing:-0.02em;}.cls-21{font-size:30.46px;letter-spacing:-0.02em;}.cls-23{font-size:32.25px;}.cls-28{fill:#945c00;}.cls-28,.cls-29{stroke-width:0.5px;} Les composants de la Galaxia \u00b6 Le microcontr\u00f4leur ESP32-S2 (WiFi et Bluetooth) \u00b6 C'est le cerveau de la carte. C'est lui qui va ex\u00e9cuter vos programmes d\u00e9sormais. Sa vitesse de calcul est de 240 MHz, ce qui est tr\u00e8s \u00e9lev\u00e9 pour une si petite carte programmable. C'est \u00e9galement ce module qui permet la communication WiFi : point d'acc\u00e8s pour la maison ou pour la classe, \u00e9changes de messages en r\u00e9seau local avec adressage IP et serveur web. Il a \u00e9galement une quantit\u00e9 de m\u00e9moire importante pour stocker plusieurs dizaines de programmes python en m\u00eame temps et des fichiers audio. L'\u00e9cran LCD \u00b6 Il a une taille de 1,8 pouces en diagonale et dispose d'une r\u00e9solution de 128\u00d7160 pixels et d'un r\u00e9tro\u00e9clairage \u00e0 LED blanche. Il peut afficher une grande vari\u00e9t\u00e9 de couleurs : 262 144 tonalit\u00e9s de couleurs (18 bits). Il permet d'afficher du texte, des donn\u00e9es et des \u00e9l\u00e9ments graphiques. Enfin, il permet de naviguer dans le menu Syst\u00e8me pour acc\u00e9der \u00e0 plusieurs fonctionnalit\u00e9s d\u00e9crites plus bas. Une led RGB \u00b6 Elle int\u00e8gre en fait 3 LEDs (rouge, vert et bleu) dans un seul bo\u00eetier pour vous permettre de composer les couleurs de votre choix. On parle dans ce cas de synth\u00e8se additive des couleurs (\u00e0 la diff\u00e9rence de la peinture o\u00f9 l'on combine les couleurs primaires : cyan, magenta et jaune avec une synth\u00e8se soustractive). Cette LED offre un indicateur lumineux simple \u00e0 programmer pour indiquer diff\u00e9rentes informations en fonction des couleurs choisies. Sa luminosit\u00e9 offre une capacit\u00e9 d'\u00e9clairage qui peut permettre d'\u00e9clairer un objet dans un environnement sombre. Pour chacune des 3 couleurs, on peut r\u00e9gler l'intensit\u00e9 lumineuse avec une valeur comprise entre 0 (absence de luminosit\u00e9) et 255 (luminosit\u00e9 maximale). Un capteur de lumi\u00e8re \u00b6 Il est int\u00e9gr\u00e9 \u00e0 la LED et capte la luminosit\u00e9 qui lui parvient. La captation est tr\u00e8s directionnelle, cela signifie qu'il faut bien pointer la LED dans la direction de la lumi\u00e8re que l'on veut mesurer. Les valeurs obtenues vont de 0 \u00e0 255. En combinaison avec l\u2019\u00e9cran vous pouvez afficher un graphique pr\u00e9sentant l\u2019\u00e9volution de la luminosit\u00e9. Programmez une alarme lorsque qu\u2019un tiroir est ouvert ou ferm\u00e9, programmez une prise connect\u00e9e qui allumera votre lampe lorsque la luminosit\u00e9 baisse, et bien d\u2019autres exp\u00e9riences. La prise jack audio \u00b6 Elle offre une entr\u00e9e et une sortie audio \u00e0 la Galaxia. Vous pouvez y brancher un micro pour exploiter l'entr\u00e9e audio, une enceinte pour exploiter la sortie, ou un kit main libre pour profiter des deux en m\u00eame temps. Le magn\u00e9tom\u00e8tre \u00b6 Ce capteur permet de mesurer un champ magn\u00e9tique dans un espace en 3 dimensions. L'usage qui nous int\u00e9ressera le plus souvent est la d\u00e9tection du nord magn\u00e9tique. Ainsi, vous pourrez programmer votre carte comme une boussole ou trouvez votre orientation par rapport au nord. Deux boutons poussoirs \u00b6 Vous pouvez d\u00e9tecter s'ils ont \u00e9t\u00e9 appuy\u00e9 bri\u00e8vement ou s'ils sont maintenus appuy\u00e9s. G\u00e9n\u00e9ralement, on utilise cette d\u00e9tection d'appui pour d\u00e9clencher des actions en cons\u00e9quence. Quatre boutons tactiles \u00b6 Leur utilisation n'est pas tr\u00e8s diff\u00e9rente de celle des boutons A et B. Ils sont dispos\u00e9s en cercle pour offrir un pad tactile qui peut \u00eatre utilis\u00e9 comme une fl\u00e8che directionnelle, ils donnent ainsi \u00e0 la Galaxia un petit air de console de jeu. Le port micro-USB \u00b6 Il vous sert \u00e0 alimenter votre Galaxia, \u00e0 communiquer/programmer avec l'ordinateur gr\u00e2ce au port s\u00e9rie . Une fois programm\u00e9e, on peut l'utiliser pour brancher une batterie USB et ainsi faire des objets mobiles. Ce c\u00e2ble n'est pas livr\u00e9 avec la carte mais il sera disponible dans la boutique pour les \u00e9tablissements scolaires qui n'en sont pas d\u00e9j\u00e0 \u00e9quip\u00e9s. Une connectique compatible micro:bit \u00b6 Il vous permet de connecter la carte Galaxia \u00e0 des robots, comme le Maqueen ou d'autres accessoires compatibles micro:bit.","title":"La carte Galaxia"},{"location":"galaxia/#les-composants-de-la-galaxia","text":"","title":"Les composants de la Galaxia"},{"location":"galaxia/#le-microcontroleur-esp32-s2-wifi-et-bluetooth","text":"C'est le cerveau de la carte. C'est lui qui va ex\u00e9cuter vos programmes d\u00e9sormais. Sa vitesse de calcul est de 240 MHz, ce qui est tr\u00e8s \u00e9lev\u00e9 pour une si petite carte programmable. C'est \u00e9galement ce module qui permet la communication WiFi : point d'acc\u00e8s pour la maison ou pour la classe, \u00e9changes de messages en r\u00e9seau local avec adressage IP et serveur web. Il a \u00e9galement une quantit\u00e9 de m\u00e9moire importante pour stocker plusieurs dizaines de programmes python en m\u00eame temps et des fichiers audio.","title":" Le microcontr\u00f4leur ESP32-S2 (WiFi et Bluetooth)"},{"location":"galaxia/#lecran-lcd","text":"Il a une taille de 1,8 pouces en diagonale et dispose d'une r\u00e9solution de 128\u00d7160 pixels et d'un r\u00e9tro\u00e9clairage \u00e0 LED blanche. Il peut afficher une grande vari\u00e9t\u00e9 de couleurs : 262 144 tonalit\u00e9s de couleurs (18 bits). Il permet d'afficher du texte, des donn\u00e9es et des \u00e9l\u00e9ments graphiques. Enfin, il permet de naviguer dans le menu Syst\u00e8me pour acc\u00e9der \u00e0 plusieurs fonctionnalit\u00e9s d\u00e9crites plus bas.","title":" L'\u00e9cran LCD"},{"location":"galaxia/#une-led-rgb","text":"Elle int\u00e8gre en fait 3 LEDs (rouge, vert et bleu) dans un seul bo\u00eetier pour vous permettre de composer les couleurs de votre choix. On parle dans ce cas de synth\u00e8se additive des couleurs (\u00e0 la diff\u00e9rence de la peinture o\u00f9 l'on combine les couleurs primaires : cyan, magenta et jaune avec une synth\u00e8se soustractive). Cette LED offre un indicateur lumineux simple \u00e0 programmer pour indiquer diff\u00e9rentes informations en fonction des couleurs choisies. Sa luminosit\u00e9 offre une capacit\u00e9 d'\u00e9clairage qui peut permettre d'\u00e9clairer un objet dans un environnement sombre. Pour chacune des 3 couleurs, on peut r\u00e9gler l'intensit\u00e9 lumineuse avec une valeur comprise entre 0 (absence de luminosit\u00e9) et 255 (luminosit\u00e9 maximale).","title":" Une led RGB"},{"location":"galaxia/#un-capteur-de-lumiere","text":"Il est int\u00e9gr\u00e9 \u00e0 la LED et capte la luminosit\u00e9 qui lui parvient. La captation est tr\u00e8s directionnelle, cela signifie qu'il faut bien pointer la LED dans la direction de la lumi\u00e8re que l'on veut mesurer. Les valeurs obtenues vont de 0 \u00e0 255. En combinaison avec l\u2019\u00e9cran vous pouvez afficher un graphique pr\u00e9sentant l\u2019\u00e9volution de la luminosit\u00e9. Programmez une alarme lorsque qu\u2019un tiroir est ouvert ou ferm\u00e9, programmez une prise connect\u00e9e qui allumera votre lampe lorsque la luminosit\u00e9 baisse, et bien d\u2019autres exp\u00e9riences.","title":" Un capteur de lumi\u00e8re"},{"location":"galaxia/#la-prise-jack-audio","text":"Elle offre une entr\u00e9e et une sortie audio \u00e0 la Galaxia. Vous pouvez y brancher un micro pour exploiter l'entr\u00e9e audio, une enceinte pour exploiter la sortie, ou un kit main libre pour profiter des deux en m\u00eame temps.","title":" La prise jack audio"},{"location":"galaxia/#le-magnetometre","text":"Ce capteur permet de mesurer un champ magn\u00e9tique dans un espace en 3 dimensions. L'usage qui nous int\u00e9ressera le plus souvent est la d\u00e9tection du nord magn\u00e9tique. Ainsi, vous pourrez programmer votre carte comme une boussole ou trouvez votre orientation par rapport au nord.","title":" Le magn\u00e9tom\u00e8tre"},{"location":"galaxia/#deux-boutons-poussoirs","text":"Vous pouvez d\u00e9tecter s'ils ont \u00e9t\u00e9 appuy\u00e9 bri\u00e8vement ou s'ils sont maintenus appuy\u00e9s. G\u00e9n\u00e9ralement, on utilise cette d\u00e9tection d'appui pour d\u00e9clencher des actions en cons\u00e9quence.","title":" Deux boutons poussoirs"},{"location":"galaxia/#quatre-boutons-tactiles","text":"Leur utilisation n'est pas tr\u00e8s diff\u00e9rente de celle des boutons A et B. Ils sont dispos\u00e9s en cercle pour offrir un pad tactile qui peut \u00eatre utilis\u00e9 comme une fl\u00e8che directionnelle, ils donnent ainsi \u00e0 la Galaxia un petit air de console de jeu.","title":" Quatre boutons tactiles"},{"location":"galaxia/#le-port-micro-usb","text":"Il vous sert \u00e0 alimenter votre Galaxia, \u00e0 communiquer/programmer avec l'ordinateur gr\u00e2ce au port s\u00e9rie . Une fois programm\u00e9e, on peut l'utiliser pour brancher une batterie USB et ainsi faire des objets mobiles. Ce c\u00e2ble n'est pas livr\u00e9 avec la carte mais il sera disponible dans la boutique pour les \u00e9tablissements scolaires qui n'en sont pas d\u00e9j\u00e0 \u00e9quip\u00e9s.","title":" Le port micro-USB"},{"location":"galaxia/#une-connectique-compatible-microbit","text":"Il vous permet de connecter la carte Galaxia \u00e0 des robots, comme le Maqueen ou d'autres accessoires compatibles micro:bit.","title":"Une connectique compatible micro:bit"},{"location":"interface/","text":"Interface Vittascience \u00b6 L'interface de programmation Vittascience permet de programmer la carte \u00e9lectronique Galaxia depuis votre navigateur web en assemblant visuellement des blocs comme un puzzle. Ces blocs vont ensuite g\u00e9n\u00e9rer automatiquement un code MicroPython compr\u00e9hensible par la carte. Il est \u00e9galement Info Veuillez notez qu'il est \u00e9galement possible de se passer des blocs et utiliser l'interface en mode code uniquement en cliquant sur le bouton dans la barre du haut. TODO Remplacer l'image ci-dessus par une vid\u00e9o lorsque l'interface sera mature \u00b6","title":"L'interface Vittascience"},{"location":"interface/#interface-vittascience","text":"L'interface de programmation Vittascience permet de programmer la carte \u00e9lectronique Galaxia depuis votre navigateur web en assemblant visuellement des blocs comme un puzzle. Ces blocs vont ensuite g\u00e9n\u00e9rer automatiquement un code MicroPython compr\u00e9hensible par la carte. Il est \u00e9galement Info Veuillez notez qu'il est \u00e9galement possible de se passer des blocs et utiliser l'interface en mode code uniquement en cliquant sur le bouton dans la barre du haut.","title":"Interface Vittascience"},{"location":"interface/#todo-remplacer-limage-ci-dessus-par-une-video-lorsque-linterface-sera-mature","text":"","title":"TODO Remplacer l'image ci-dessus par une vid\u00e9o lorsque l'interface sera mature"},{"location":"affichage/led/led/","text":"Contr\u00f4ler une LED \u00b6 Permet de contr\u00f4ler l'\u00e9tat de la LED connect\u00e9e sur une broche de la carte \u00e9lectronique. Branchement \u00b6 Exemple \u00b6 Dans l'exemple ci-dessous, nous allons allumer une LED branch\u00e9e sur la broche 2 pendant une seconde puis l'\u00e9teindre : Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # On importe les modules machine et utime from machine import * import utime # D\u00e9claration d'une broche en sortie sur la broche 2 # \u00e0 l'aide du constructeur Pin() led = Pin ( 2 , Pin . OUT ) # On allume la LED led . on () # On attend 1 seconde utime . sleep ( 1 ) # On \u00e9teint la LED led . off () Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Contr\u00f4ler une LED"},{"location":"affichage/led/led/#controler-une-led","text":"Permet de contr\u00f4ler l'\u00e9tat de la LED connect\u00e9e sur une broche de la carte \u00e9lectronique.","title":"Contr\u00f4ler une LED"},{"location":"affichage/led/led/#branchement","text":"","title":"Branchement"},{"location":"affichage/led/led/#exemple","text":"Dans l'exemple ci-dessous, nous allons allumer une LED branch\u00e9e sur la broche 2 pendant une seconde puis l'\u00e9teindre : Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # On importe les modules machine et utime from machine import * import utime # D\u00e9claration d'une broche en sortie sur la broche 2 # \u00e0 l'aide du constructeur Pin() led = Pin ( 2 , Pin . OUT ) # On allume la LED led . on () # On attend 1 seconde utime . sleep ( 1 ) # On \u00e9teint la LED led . off ()","title":"Exemple"},{"location":"affichage/led/led/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"affichage/led_rgb/led_rgb/","text":"TODO : refaire cette fiche lorsque le simulateur est ok \u00b6 Permet de r\u00e9gler l'intensit\u00e9 de la LED int\u00e9gr\u00e9e \u00e0 la carte Galaxia, de 0 \u00e0 100 pour chacune des couleurs (rouge, vert, bleu). Branchement \u00b6 Exemple \u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # On importe les modules machine et utime from machine import * import utime # D\u00e9claration d'une broche en sortie sur la broche 2 # \u00e0 l'aide du constructeur Pin() led = Pin ( 2 , Pin . OUT ) # On allume la LED led . on () # On attend 1 seconde utime . sleep ( 1 ) # On \u00e9teint la LED led . off () Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la [documentation MicroPython](https://www.micropyt","title":"Contr\u00f4ler une LED RVB"},{"location":"affichage/led_rgb/led_rgb/#todo-refaire-cette-fiche-lorsque-le-simulateur-est-ok","text":"Permet de r\u00e9gler l'intensit\u00e9 de la LED int\u00e9gr\u00e9e \u00e0 la carte Galaxia, de 0 \u00e0 100 pour chacune des couleurs (rouge, vert, bleu).","title":"TODO : refaire cette fiche lorsque le simulateur est ok"},{"location":"affichage/led_rgb/led_rgb/#branchement","text":"","title":"Branchement"},{"location":"affichage/led_rgb/led_rgb/#exemple","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # On importe les modules machine et utime from machine import * import utime # D\u00e9claration d'une broche en sortie sur la broche 2 # \u00e0 l'aide du constructeur Pin() led = Pin ( 2 , Pin . OUT ) # On allume la LED led . on () # On attend 1 seconde utime . sleep ( 1 ) # On \u00e9teint la LED led . off ()","title":"Exemple"},{"location":"affichage/led_rgb/led_rgb/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la classe Pin qui permet de manipuler les broches E/S (Entr\u00e9e/Sortie) de la carte \u00e9lectronique. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la [documentation MicroPython](https://www.micropyt","title":"Aller plus loin"},{"location":"boucles/boucle_avec_variable/","text":"Boucle avec variable \u00b6 Faire prendre \u00e0 la variable i les valeurs depuis le nombre de d\u00e9but jusqu\u2019au nombre de fin, en s\u2019incr\u00e9mentant du pas sp\u00e9cifi\u00e9, et ex\u00e9cuter les instructions situ\u00e9es dans la boucle. Exemple \u00b6 Exemple avec des blocs Exemple avec du code Info Le bloc variable peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Variables . Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che ( ) situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable. 1 2 3 4 5 6 7 8 9 # On importe le module utime import utime # On utilise une boucle For pour ex\u00e9cuter # 10 fois les fonctions print() et sleep() for i in range ( 10 ): # Notez que la fonction print() peut prendre plusieurs arguments print ( i , \" secondes \u00e9coul\u00e9es\" ) utime . sleep ( 1 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () et range () . Pour en savoir plus sur la fonction range () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Boucle avec variable"},{"location":"boucles/boucle_avec_variable/#boucle-avec-variable","text":"Faire prendre \u00e0 la variable i les valeurs depuis le nombre de d\u00e9but jusqu\u2019au nombre de fin, en s\u2019incr\u00e9mentant du pas sp\u00e9cifi\u00e9, et ex\u00e9cuter les instructions situ\u00e9es dans la boucle.","title":"Boucle avec variable"},{"location":"boucles/boucle_avec_variable/#exemple","text":"Exemple avec des blocs Exemple avec du code Info Le bloc variable peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Variables . Notez que cette variable peut \u00eatre renomm\u00e9e en cliquant sur la petite fl\u00e8che ( ) situ\u00e9e \u00e0 c\u00f4t\u00e9 du nom de la variable. 1 2 3 4 5 6 7 8 9 # On importe le module utime import utime # On utilise une boucle For pour ex\u00e9cuter # 10 fois les fonctions print() et sleep() for i in range ( 10 ): # Notez que la fonction print() peut prendre plusieurs arguments print ( i , \" secondes \u00e9coul\u00e9es\" ) utime . sleep ( 1 )","title":"Exemple"},{"location":"boucles/boucle_avec_variable/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () et range () . Pour en savoir plus sur la fonction range () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"boucles/boucle_simple/","text":"Boucle simple \u00b6 \u00c9x\u00e9cuter des instructions plusieurs fois. Exemple \u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 # On utilise une boucle For pour ex\u00e9cuter # 3 fois la fonction print() for count in range ( 3 ): print ( 'toc !' ); Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () et range () . Pour en savoir plus sur la fonction range () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Boucle simple"},{"location":"boucles/boucle_simple/#boucle-simple","text":"\u00c9x\u00e9cuter des instructions plusieurs fois.","title":"Boucle simple"},{"location":"boucles/boucle_simple/#exemple","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 # On utilise une boucle For pour ex\u00e9cuter # 3 fois la fonction print() for count in range ( 3 ): print ( 'toc !' );","title":"Exemple"},{"location":"boucles/boucle_simple/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython print () et range () . Pour en savoir plus sur la fonction range () , nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"communication/ecrire_dans_la_console/","text":"\u00c9crire dans la console \u00b6 Permet d'\u00e9crire des donn\u00e9es dans le port s\u00e9rie (appel\u00e9 \u00e9galement console ou encore REPL ). Le port s\u00e9rie permet d'\u00e9changer des donn\u00e9es entre la carte Galaxia et l'ordinateur gr\u00e2ce \u00e0 la liaison USB. Lorsque vous utilisez l'interface Vittascience, vous pouvez voir les donn\u00e9es re\u00e7ues de la carte (ou du simulateur) gr\u00e2ce au bouton REPL situ\u00e9 en bas de l'interface . Exemple \u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 # print() fait partie du langage MicroPython # pas besoin d'importer un module # Affichage d'un message avec la fonction print() print ( \"Bonjour !\" ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"\u00c9crire dans la console"},{"location":"communication/ecrire_dans_la_console/#ecrire-dans-la-console","text":"Permet d'\u00e9crire des donn\u00e9es dans le port s\u00e9rie (appel\u00e9 \u00e9galement console ou encore REPL ). Le port s\u00e9rie permet d'\u00e9changer des donn\u00e9es entre la carte Galaxia et l'ordinateur gr\u00e2ce \u00e0 la liaison USB. Lorsque vous utilisez l'interface Vittascience, vous pouvez voir les donn\u00e9es re\u00e7ues de la carte (ou du simulateur) gr\u00e2ce au bouton REPL situ\u00e9 en bas de l'interface .","title":"\u00c9crire dans la console"},{"location":"communication/ecrire_dans_la_console/#exemple","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 # print() fait partie du langage MicroPython # pas besoin d'importer un module # Affichage d'un message avec la fonction print() print ( \"Bonjour !\" )","title":"Exemple"},{"location":"communication/ecrire_dans_la_console/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Aller plus loin"},{"location":"entrees_sorties/temps/attendre/","text":"Attendre \u00b6 Effectue une pause dans l'ex\u00e9cution du code. Exemple \u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 # On importe le module utime import utime # Affichage d'un message avec la fonction print() print ( \"D\u00e9marrage du programme\" ) # On attend 1 seconde utime . sleep ( 1 ) print ( \"1 seconde \u00e9coul\u00e9e\" ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la fonction print () et le module utime qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur ce module, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Attendre"},{"location":"entrees_sorties/temps/attendre/#attendre","text":"Effectue une pause dans l'ex\u00e9cution du code.","title":"Attendre"},{"location":"entrees_sorties/temps/attendre/#exemple","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 # On importe le module utime import utime # Affichage d'un message avec la fonction print() print ( \"D\u00e9marrage du programme\" ) # On attend 1 seconde utime . sleep ( 1 ) print ( \"1 seconde \u00e9coul\u00e9e\" )","title":"Exemple"},{"location":"entrees_sorties/temps/attendre/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la fonction print () et le module utime qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur ce module, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"entrees_sorties/temps/chronometre/","text":"Utiliser le chronom\u00e8tre \u00b6 R\u00e9cup\u00e9rer le nombre de millisecondes \u00e9coul\u00e9es depuis le lancement de la carte. Exemple \u00b6 Exemple avec des blocs Exemple avec du code Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte . Le bloc permet d'arrondir un nombre flottant. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Math . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # On importe le module utime (pour ticks_ms et ticks_diff) import utime # On importe le module math (pour la fonction round) import math # On vient stocker le temps de d\u00e9but debut = utime . ticks_ms () # On r\u00e9p\u00e8te ind\u00e9finiment while True : # On affiche la diff\u00e9rence de temps entre maintenant et le d\u00e9but print ( round ( utime . ticks_diff ( utime . ticks_ms (), debut ) / 1000 ), \" secondes\" ) # On attend 1 seconde utime . sleep ( 1 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons le module utime qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Utiliser le chronom\u00e8tre"},{"location":"entrees_sorties/temps/chronometre/#utiliser-le-chronometre","text":"R\u00e9cup\u00e9rer le nombre de millisecondes \u00e9coul\u00e9es depuis le lancement de la carte.","title":"Utiliser le chronom\u00e8tre"},{"location":"entrees_sorties/temps/chronometre/#exemple","text":"Exemple avec des blocs Exemple avec du code Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte . Le bloc permet d'arrondir un nombre flottant. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Math . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # On importe le module utime (pour ticks_ms et ticks_diff) import utime # On importe le module math (pour la fonction round) import math # On vient stocker le temps de d\u00e9but debut = utime . ticks_ms () # On r\u00e9p\u00e8te ind\u00e9finiment while True : # On affiche la diff\u00e9rence de temps entre maintenant et le d\u00e9but print ( round ( utime . ticks_diff ( utime . ticks_ms (), debut ) / 1000 ), \" secondes\" ) # On attend 1 seconde utime . sleep ( 1 )","title":"Exemple"},{"location":"entrees_sorties/temps/chronometre/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons le module utime qui permet de g\u00e9rer les \u00e9l\u00e9ments de temps. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"fonctions/fonction/","text":"D\u00e9finir une fonction \u00b6 Rendre une partie de programme accessible par son nom en lui passant tout ce qui lui est n\u00e9cessaire pour fonctionner. Les variables d\u00e9clar\u00e9es dans la fonction ne sont valable qu'en local dans la fonction ()(port\u00e9e d'une variable). De plus dans une fonction, les variables globales ne sont disponible qu'en lecture. Exemple \u00b6 Exemple avec des blocs Exemple avec du code :fontawesome-solid-plus-large: Info Les blocs pour d\u00e9finir une fonction peuvent \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Fonctions . on ajoute le nombre de variables n\u00e9cessaires avec le . et on cr\u00e9\u00e9 les variables dans l'espace blanc sur le cot\u00e9 pr\u00e9vu \u00e0 cet effet Notez que dans cette cat\u00e9gorie il existe deux types de bloc. Des blocs pour les fonctions dont on r\u00e9cup\u00e8re le r\u00e9sultat dans le format de son choix. d'autre sans sortie 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from machine import * import time # LED Module on p26 d2 = Pin ( 26 , Pin . OUT ) # on d\u00e9fini la fonction par un nom explicite, # les variables d\u00e9clar\u00e9es dans la parenth\u00e8se pourront interagir avec le corps de la fonction def blink_par__seconde ( x ): d2 . on () time . sleep ( x ) d2 . off () # le corp de mon programme while True : # Appel de la fonction avec 2 comme param\u00e8tre blink_par__seconde ( 2 ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la classe def qui permet de d\u00e9finir une fonction. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Fonctions"},{"location":"fonctions/fonction/#definir-une-fonction","text":"Rendre une partie de programme accessible par son nom en lui passant tout ce qui lui est n\u00e9cessaire pour fonctionner. Les variables d\u00e9clar\u00e9es dans la fonction ne sont valable qu'en local dans la fonction ()(port\u00e9e d'une variable). De plus dans une fonction, les variables globales ne sont disponible qu'en lecture.","title":"D\u00e9finir une fonction"},{"location":"fonctions/fonction/#exemple","text":"Exemple avec des blocs Exemple avec du code :fontawesome-solid-plus-large: Info Les blocs pour d\u00e9finir une fonction peuvent \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Fonctions . on ajoute le nombre de variables n\u00e9cessaires avec le . et on cr\u00e9\u00e9 les variables dans l'espace blanc sur le cot\u00e9 pr\u00e9vu \u00e0 cet effet Notez que dans cette cat\u00e9gorie il existe deux types de bloc. Des blocs pour les fonctions dont on r\u00e9cup\u00e8re le r\u00e9sultat dans le format de son choix. d'autre sans sortie 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from machine import * import time # LED Module on p26 d2 = Pin ( 26 , Pin . OUT ) # on d\u00e9fini la fonction par un nom explicite, # les variables d\u00e9clar\u00e9es dans la parenth\u00e8se pourront interagir avec le corps de la fonction def blink_par__seconde ( x ): d2 . on () time . sleep ( x ) d2 . off () # le corp de mon programme while True : # Appel de la fonction avec 2 comme param\u00e8tre blink_par__seconde ( 2 )","title":"Exemple"},{"location":"fonctions/fonction/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la classe def qui permet de d\u00e9finir une fonction. Pour en savoir plus sur cette classe, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"includes/abbreviations/","text":"","title":"Abbreviations"},{"location":"logique/instruction_conditionnelle/","text":"Instruction conditionnelle \u00b6 Ex\u00e9cute une ou plusieurs instructions si une condition est vraie ou non. Exemple \u00b6 Exemple avec des blocs Exemple avec du code Info Le bloc if peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Logique . Notez qu'une condition doit \u00eatre fournie pour que ce bloc soit fonctionnel. 1 2 3 4 5 6 7 8 9 # On boucle ind\u00e9finiment while True : # Si le niveau de luminosit\u00e9 relev\u00e9 par le capteur est sup\u00e9rieur \u00e0 125 if led . read_light_level () > 125 : # Alors on allume la LED RVB en rouge led . set_colors ( 255 , 0 , 0 ) else : # Sinon on allume la LED RVB en vert led . set_colors ( 0 , 255 , 0 ) Si la partie entre if et les : est \u00e9valu\u00e9e comme vrai alors les instructions indent\u00e9es qui suivent les : seront ex\u00e9cut\u00e9es. Sinon ce sont les instructions situ\u00e9es apr\u00e8s le else : qui le seront. Aller plus loin \u00b6 On a souvent l'habitude de repr\u00e9senter le cours du programme avec un organigramme de programmation : graph TD A[Je mets mes chaussures]-->C{Est-ce qu'il pleut ?} C -->|non| D[Je sors] C -->|oui| E[Je prends un parapluie] E --> D Si vous voulez en savoir plus sur les organigrammes, voici une chouette page Wikip\u00e9dia . Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython if et else . Pour en savoir plus, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Ex\u00e9cuter des instructions si une condition est vraie ou non"},{"location":"logique/instruction_conditionnelle/#instruction-conditionnelle","text":"Ex\u00e9cute une ou plusieurs instructions si une condition est vraie ou non.","title":"Instruction conditionnelle"},{"location":"logique/instruction_conditionnelle/#exemple","text":"Exemple avec des blocs Exemple avec du code Info Le bloc if peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Logique . Notez qu'une condition doit \u00eatre fournie pour que ce bloc soit fonctionnel. 1 2 3 4 5 6 7 8 9 # On boucle ind\u00e9finiment while True : # Si le niveau de luminosit\u00e9 relev\u00e9 par le capteur est sup\u00e9rieur \u00e0 125 if led . read_light_level () > 125 : # Alors on allume la LED RVB en rouge led . set_colors ( 255 , 0 , 0 ) else : # Sinon on allume la LED RVB en vert led . set_colors ( 0 , 255 , 0 ) Si la partie entre if et les : est \u00e9valu\u00e9e comme vrai alors les instructions indent\u00e9es qui suivent les : seront ex\u00e9cut\u00e9es. Sinon ce sont les instructions situ\u00e9es apr\u00e8s le else : qui le seront.","title":"Exemple"},{"location":"logique/instruction_conditionnelle/#aller-plus-loin","text":"On a souvent l'habitude de repr\u00e9senter le cours du programme avec un organigramme de programmation : graph TD A[Je mets mes chaussures]-->C{Est-ce qu'il pleut ?} C -->|non| D[Je sors] C -->|oui| E[Je prends un parapluie] E --> D Si vous voulez en savoir plus sur les organigrammes, voici une chouette page Wikip\u00e9dia . Dans l'exemple ci-dessus, nous utilisons les fonctions du langage MicroPython if et else . Pour en savoir plus, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"math/manipuler_des_nombres/","text":"Manipuler des nombres \u00b6 Le module math fournit des fonctions permettant de manipuler des nombres. Exemple \u00b6 Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import math # On initialise une variable appel\u00e9e nombre \u00e0 6 nombre = 6 # La ligne suivante va afficher 6 dans la console print ( nombre ) nombre = nombre + 3 # La ligne suivante va afficher 9 dans la console print ( nombre ) nombre = math . sqrt ( nombre ) # La ligne suivante va afficher 3 dans la console print ( nombre ) nombre = nombre / 6 # La ligne suivante va afficher 0.5 dans la console print ( nombre ) nombre = math . ceil ( nombre ) # La ligne suivante va afficher 1 (arrondi par exc\u00e8s du nombre flottant 0.5) print ( nombre ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons le module math .Pour en savoir plus sur ce module, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Manipuler des nombres"},{"location":"math/manipuler_des_nombres/#manipuler-des-nombres","text":"Le module math fournit des fonctions permettant de manipuler des nombres.","title":"Manipuler des nombres"},{"location":"math/manipuler_des_nombres/#exemple","text":"Exemple avec des blocs Exemple avec du code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import math # On initialise une variable appel\u00e9e nombre \u00e0 6 nombre = 6 # La ligne suivante va afficher 6 dans la console print ( nombre ) nombre = nombre + 3 # La ligne suivante va afficher 9 dans la console print ( nombre ) nombre = math . sqrt ( nombre ) # La ligne suivante va afficher 3 dans la console print ( nombre ) nombre = nombre / 6 # La ligne suivante va afficher 0.5 dans la console print ( nombre ) nombre = math . ceil ( nombre ) # La ligne suivante va afficher 1 (arrondi par exc\u00e8s du nombre flottant 0.5) print ( nombre )","title":"Exemple"},{"location":"math/manipuler_des_nombres/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons le module math .Pour en savoir plus sur ce module, nous vous invitons \u00e0 lire la documentation MicroPython .","title":"Aller plus loin"},{"location":"moteurs/servomoteur/","text":"Contr\u00f4ler un servomoteur \u00b6 Permet de contr\u00f4ler l'angle d'un servomoteur (de 0 \u00e0 180) 0 \u00e0 180) sur les broches digitales. Exemple avec des blocs \u00b6 Exemple avec du code \u00b6 1 2 3 4 5 # print() fait partie du langage MicroPython # pas besoin d'importer un module # Affichage d'un message avec la fonction print() print ( \"Bonjour !\" ) Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Actionneurs"},{"location":"moteurs/servomoteur/#controler-un-servomoteur","text":"Permet de contr\u00f4ler l'angle d'un servomoteur (de 0 \u00e0 180) 0 \u00e0 180) sur les broches digitales.","title":"Contr\u00f4ler un servomoteur"},{"location":"moteurs/servomoteur/#exemple-avec-des-blocs","text":"","title":"Exemple avec des blocs"},{"location":"moteurs/servomoteur/#exemple-avec-du-code","text":"1 2 3 4 5 # print() fait partie du langage MicroPython # pas besoin d'importer un module # Affichage d'un message avec la fonction print() print ( \"Bonjour !\" )","title":"Exemple avec du code"},{"location":"moteurs/servomoteur/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Aller plus loin"},{"location":"variables/variable_texte/","text":"Utiliser une variable pour y stocker du texte \u00b6 Une variable est un espace m\u00e9moire dans lequel il est possible de mettre une valeur. Par exemple, pour stocker un pr\u00e9nom (qui est un texte) dans une variable, je peux utiliser les instructions suivantes : Exemple avec des blocs \u00b6 Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte . Exemple avec du code \u00b6 1 2 3 4 5 # prenom est le nom de ma variable # \"Baptiste\" est une cha\u00eene de caract\u00e8res, notez bien les guillemets # le signe '=' va stocker la cha\u00eene de caract\u00e8res dans la variable prenom prenom = \"Baptiste\" print ( \"Salut \" , prenom , \" !\" ); Aller plus loin \u00b6 Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Stocker du texte"},{"location":"variables/variable_texte/#utiliser-une-variable-pour-y-stocker-du-texte","text":"Une variable est un espace m\u00e9moire dans lequel il est possible de mettre une valeur. Par exemple, pour stocker un pr\u00e9nom (qui est un texte) dans une variable, je peux utiliser les instructions suivantes :","title":"Utiliser une variable pour y stocker du texte"},{"location":"variables/variable_texte/#exemple-avec-des-blocs","text":"Info Le bloc permet d'agr\u00e9ger (on dit aussi concat\u00e9ner) des \u00e9l\u00e9ments (variables, cha\u00eenes de caract\u00e8res...) pour former un nouveau texte. Ce bloc peut \u00eatre trouv\u00e9 dans la cat\u00e9gorie de blocs Texte .","title":"Exemple avec des blocs"},{"location":"variables/variable_texte/#exemple-avec-du-code","text":"1 2 3 4 5 # prenom est le nom de ma variable # \"Baptiste\" est une cha\u00eene de caract\u00e8res, notez bien les guillemets # le signe '=' va stocker la cha\u00eene de caract\u00e8res dans la variable prenom prenom = \"Baptiste\" print ( \"Salut \" , prenom , \" !\" );","title":"Exemple avec du code"},{"location":"variables/variable_texte/#aller-plus-loin","text":"Dans l'exemple ci-dessus, nous utilisons la fonction print () qui fait partie du langage MicroPython (donc pas besoin d'importer un module pour l'utiliser). Cette fonction peut prendre un ou plusieurs param\u00e8tres d\u00e9taill\u00e9s dans la documentation MicroPython .","title":"Aller plus loin"}]}